"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[2353],{1252:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var i=t(5893),a=t(1151),o=t(9286);const s="type UnaryFunction<T> = (arg: T) => T\n\n/**\n * Composes any number of unary functions into a single unary function.\n * Functions are applied in right-to-left order.\n *\n * @param {...UnaryFunction<T>[]} functions - The unary functions to compose.\n * @returns {(data: T) => T} A function that, when called with an argument, applies the composed functions to the argument.\n *\n * @template T The type of the argument and return value.\n *\n * @example\n * const addOne = (x) => x + 1;\n * const double = (x) => x * 2;\n * const addOneThenDouble = compose(double, addOne);\n * const result = addOneThenDouble(5); // 12\n */\nexport const compose =\n  <T>(...functions: UnaryFunction<T>[]) =>\n  (data: T) =>\n    functions.reduceRight((value, func) => func(value), data)\n\n/**\n * Pipes any number of unary functions into a single unary function.\n * Functions are applied in left-to-right order.\n *\n * @param {...UnaryFunction<T>[]} functions - The unary functions to pipe.\n * @returns {(data: T) => T} A function that, when called with an argument, applies the piped functions to the argument.\n *\n * @template T The type of the argument and return value.\n *\n * @example\n * const addOne = (x) => x + 1;\n * const double = (x) => x * 2;\n * const addOneThenDouble = pipe(double, addOne);\n * const result = addOneThenDouble(5); // 11\n */\nexport const pipe =\n  <T>(...functions: UnaryFunction<T>[]) =>\n  (data: T) =>\n    functions.reduce((value, func) => func(value), data)\n",c={},r="Pipe & Compose",p={id:"snippets/Typescript/Function/pipe",title:"Pipe & Compose",description:"A unary function is a function that accepts exactly one argument and can be",source:"@site/docs/snippets/Typescript/Function/pipe.mdx",sourceDirName:"snippets/Typescript/Function",slug:"/snippets/Typescript/Function/pipe",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/pipe",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Function/pipe.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Check if the provided argument is a valid JSON",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/is-valid-json"},next:{title:"Sleep",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/sleep"}},u={},d=[];function l(n){const e={h1:"h1",p:"p",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"pipe--compose",children:"Pipe & Compose"}),"\n",(0,i.jsx)(o.Z,{language:"ts",children:s}),"\n",(0,i.jsx)(e.p,{children:"A unary function is a function that accepts exactly one argument and can be\ncreated by calling the function with just the first argument provided."})]})}function m(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}}}]);