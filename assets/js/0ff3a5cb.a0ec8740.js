"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[2297],{7323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>p,metadata:()=>l,toc:()=>m});var s=n(5893),r=n(1151),i=n(9286);const o="/**\n * Pauses the execution of an asynchronous function for a specified time.\n *\n * @param {number} time - The amount of time to sleep in milliseconds.\n * @returns {Promise<void>} - A Promise that resolves after the specified time.\n * @throws {Error} - Throws an error if the time is a negative number.\n *\n * @example\n * // pauses for 1 second\n * await sleep(1000);\n *\n * @example\n * // throws Error: Invalid time value. Time must be a non-negative number.\n * await sleep(-1000);\n */\nexport const sleep = (time: number): Promise<void> => {\n  if (time < 0)\n    throw new Error('Invalid time value. Time must be a non-negative number.')\n\n  return new Promise<void>(resolve => setTimeout(resolve, time))\n}",p={},a="Sleep",l={id:"snippets/typescript/sleep",title:"Sleep",description:"",source:"@site/docs/snippets/typescript/sleep.mdx",sourceDirName:"snippets/typescript",slug:"/snippets/typescript/sleep",permalink:"/my-learning-curve/docs/snippets/typescript/sleep",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/docs/snippets/typescript/sleep.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Shallow comparison",permalink:"/my-learning-curve/docs/snippets/typescript/shallow-comparison"},next:{title:"Throttle & Debounce Functions",permalink:"/my-learning-curve/docs/snippets/typescript/throttle-debounce"}},c={},m=[];function u(e){const t={h1:"h1",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"sleep",children:"Sleep"}),"\n",(0,s.jsx)(i.Z,{language:"ts",children:o})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);