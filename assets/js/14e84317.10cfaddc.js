"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[5283],{9425:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var r=t(5893),s=t(1151),i=t(9286);const o="/**\n * Converts a string to a boolean based on whether it's included in a list of \"truthy\" string values.\n *\n * This function is case-insensitive and ignores leading and trailing whitespace in the input string. By default, the only \"truthy\" string value is 'true'.\n *\n * @param {string} value - The string to convert to a boolean.\n * @param {string[]} [truthyValues=['true']] - An optional array of strings that should be considered \"truthy\". If this parameter is not provided, the function will only consider 'true' to be \"truthy\".\n * @returns {boolean} - Returns `true` if the trimmed, lowercased `value` is included in `truthyValues`, else `false`.\n *\n * @example\n * stringToBoolean('true') // returns true\n * stringToBoolean('True') // returns true\n * stringToBoolean(' TRUE ') // returns true\n * stringToBoolean('false') // returns false\n * stringToBoolean('yes', ['yes', 'y', 'true']) // returns true\n * stringToBoolean('no', ['yes', 'y', 'true']) // returns false\n */\nexport const stringToBoolean = (\n  value: string,\n  truthyValues = ['true'],\n): boolean => truthyValues.includes(value.toLowerCase().trim())\n",a={},l="Convert a string to a boolean",u={id:"snippets/Typescript/String/string-to-boolean",title:"Convert a string to a boolean",description:"Credits: [Angelos",source:"@site/docs/snippets/Typescript/String/string-to-boolean.mdx",sourceDirName:"snippets/Typescript/String",slug:"/snippets/Typescript/String/string-to-boolean",permalink:"/my-learning-curve/docs/snippets/Typescript/String/string-to-boolean",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/String/string-to-boolean.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Sets",permalink:"/my-learning-curve/docs/snippets/Typescript/Set/sets"},next:{title:"Find node in tree",permalink:"/my-learning-curve/docs/snippets/Typescript/Tree/find-node-in-tree"}},p={},c=[];function d(e){const n={a:"a",h1:"h1",p:"p",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"convert-a-string-to-a-boolean",children:"Convert a string to a boolean"}),"\n",(0,r.jsx)(i.Z,{language:"ts",children:o}),"\n",(0,r.jsxs)(n.p,{children:["Credits: ",(0,r.jsx)(n.a,{href:"https://www.30secondsofcode.org/js/s/string-to-boolean/",children:"Angelos\nChalaris"})]})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);