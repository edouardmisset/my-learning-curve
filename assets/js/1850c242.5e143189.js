"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[3536],{423:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(5893),i=t(1151);const r={},a="Merge Request / Pull Request",o={id:"documentation/merge-request-recommandations",title:"Merge Request / Pull Request",description:"Creating the perfect MR",source:"@site/docs/documentation/05-merge-request-recommandations.md",sourceDirName:"documentation",slug:"/documentation/merge-request-recommandations",permalink:"/my-learning-curve/docs/documentation/merge-request-recommandations",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/documentation/05-merge-request-recommandations.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Conventional Commits",permalink:"/my-learning-curve/docs/documentation/conventional-commits"},next:{title:"Git branch strategies",permalink:"/my-learning-curve/docs/documentation/git-workflow"}},l={},c=[{value:"Creating the perfect MR",id:"creating-the-perfect-mr",level:2},{value:"Receiving review comments",id:"receiving-review-comments",level:2},{value:"Conventional Comments",id:"conventional-comments",level:2},{value:"Abstract",id:"abstract",level:3},{value:"Format",id:"format",level:3},{value:"Example:",id:"example",level:4},{value:"Labels",id:"labels",level:3},{value:"Examples:",id:"examples",level:4},{value:"Decorations",id:"decorations",level:3},{value:"Examples:",id:"examples-1",level:4},{value:"Best Practices",id:"best-practices",level:3},{value:"Examples:",id:"examples-2",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"merge-request--pull-request",children:"Merge Request / Pull Request"}),"\n",(0,s.jsx)(n.h2,{id:"creating-the-perfect-mr",children:"Creating the perfect MR"}),"\n",(0,s.jsx)(n.p,{children:"There is no such thing as a perfect MR, but there are some things you can do to make it easier to review your MR. This will not only help reviewers but also you as a contributor to having your change merged quicker, and the end-user getting your improvement faster."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Make your MRs as small as possible"}),". A MR should only refactor one thing, fix one thing, add one feature, or adjust a single subject in the documentation. If you want to change multiple things, please create multiple MRs. Smaller MRs have a smaller scope, need less time to review, conflict less often, and generally need fewer review iterations."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Only change one thing at a time"}),". This is the same as the previous point but a bit more specific. It is tempting to improve those one or two lines you've noticed nearby, but please don't. Put those in a separate MR. Unrelated changes in your MR are distracting and often lead to questions. In contrast, in an independent MR, it would be a quick and simple review and merge."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Test your changes before creating a MR"}),". This sounds obvious, but we often see MRs that contain impossible code that could never have worked or documentation changes that aren't visible on the resulting page. Of course, a waste of energy for both you and the reviewer; it adds an unneeded review iteration. Make sure you at least run and physically test your changes. Ensure they work (or, in the case of documentation: look) as intended."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ensure your MR is based on the latest version of the main upstream branch"}),". Make sure to pull in the latest upstream changes before creating your MR. While you wrote your changes, upstream may have changed. This can lead to merge conflicts, failing tests, or your changes not working as expected."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a (feature) branch"}),". When you create a MR, it is based on a branch (usually the main branch). You must create a new feature branch for each MR you create. This makes it easier to keep your main branch up to date with the upstream branch, and it makes it easier to delete the branch after the MR has been merged."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Motivate your MR by adding a clear title & extensive description"}),". When you open up a MR, you will be provided a MR template. Use the template, fill out as many fields as possible, take your time to write a good, clear, and concise title, and add an extensive description of your change. Be sure to add a motivation (or use case) to your MR, so the reviewer can understand why you are making this change (or why you make certain decisions)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"receiving-review-comments",children:"Receiving review comments"}),"\n",(0,s.jsx)(n.p,{children:"When your MR is open, someone will look at your code at some point. The reviewer likely has some comments on your code or even some requests for changes to your code."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Be very aware these review comments are not personal"}),". The reviewer is not trying to insult you or make you feel bad. They are trying to help you improve your MR, so it can be merged. Just like you, they are a volunteer, and they are trying to work on making Home Assistant the best it can be. We all have the same goals."]}),"\n",(0,s.jsx)(n.p,{children:"No matter how experienced you are, there is always something to learn from\nothers, so don't hate it, embrace it. \ud83d\ude04 Don't be afraid to ask questions, or\nask for clarification. If you don't understand something, ask!"}),"\n",(0,s.jsx)(n.h2,{id:"conventional-comments",children:"Conventional Comments"}),"\n",(0,s.jsx)(n.h3,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsx)(n.p,{children:"Conventional Comments is a standardized approach for formatting comments in various review and feedback processes, such as code reviews, peer reviews, and editing. The goal is to create comments that are easy to understand and search. Labeling comments with specific tags helps communicate the intention clearly, encourages collaboration, and facilitates machine parsing."}),"\n",(0,s.jsx)(n.h3,{id:"format",children:"Format"}),"\n",(0,s.jsx)(n.p,{children:"Comments adhere to a consistent format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"<label> [decorations]: <subject>\n\n[discussion]\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"}),": Signifies the type of comment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subject"}),": The main message of the comment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"decorations (optional)"}),": Extra labels for the comment, comma-separated."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"discussion (optional)"}),": Supporting statements, context, reasoning, and next steps."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"question (non-blocking): At this point, does it matter which thread has won?\n\nMaybe to prevent a race condition we should keep looping until they've all won?\n"})}),"\n",(0,s.jsx)(n.p,{children:"Automatically parsed into:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "label": "question",\n  "subject": "At this point, does it matter which thread has won?",\n  "decorations": ["non-blocking"],\n  "discussion": "Maybe to prevent a race condition we should keep looping until they\'ve all won?"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"labels",children:"Labels"}),"\n",(0,s.jsx)(n.p,{children:"Recommended labels for comments:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Label"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"praise"}),(0,s.jsx)(n.td,{children:"Highlight positive aspects."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"nitpick"}),(0,s.jsx)(n.td,{children:"Trivial, preference-based requests."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"suggestion"}),(0,s.jsx)(n.td,{children:"Propose improvements, be explicit."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"issue"}),(0,s.jsx)(n.td,{children:"Highlight specific problems, pair with suggestions."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"todo"}),(0,s.jsx)(n.td,{children:"Small, necessary changes before acceptance."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"question"}),(0,s.jsx)(n.td,{children:"Seek clarification or investigation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"thought"}),(0,s.jsx)(n.td,{children:"Share valuable ideas."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"chore"}),(0,s.jsx)(n.td,{children:"Simple tasks for official acceptance."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"note"}),(0,s.jsx)(n.td,{children:"Non-blocking, highlights something for the reader."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"issue (ux,non-blocking): These buttons should be red, but let's handle this in a follow-up.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"decorations",children:"Decorations"}),"\n",(0,s.jsx)(n.p,{children:"Decorations provide additional context for comments:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Decoration"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(non-blocking)"}),(0,s.jsx)(n.td,{children:"Should not prevent acceptance."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(blocking)"}),(0,s.jsx)(n.td,{children:"Should prevent acceptance until resolved."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"(if-minor)"}),(0,s.jsx)(n.td,{children:"Resolve only if changes are minor or trivial."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"examples-1",children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"suggestion (security): I'm concerned about implementing our own DOM purifying function here\u2026\n"})}),"\n",(0,s.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use expressive labels or diverge if appropriate."}),"\n",(0,s.jsx)(n.li,{children:"Keep decorations minimal, improving readability."}),"\n",(0,s.jsx)(n.li,{children:"Establish organization-specific decorations if needed."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"examples-2",children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"nitpick: little star => little bat\n\nCan we update the other references as well?\n"})}),"\n",(0,s.jsx)(n.p,{children:"This system encourages clear communication, collaboration, and efficient review processes."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);