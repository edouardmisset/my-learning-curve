"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[7068],{7585:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>y,contentTitle:()=>c,default:()=>f,frontMatter:()=>p,metadata:()=>i,toc:()=>l});var n=t(5893),a=t(1151),s=t(9286);const o="/**\n * Selects a specific property from each object in an array.\n *\n * @template T - The type of the objects in the array.\n * @template K - The type of the key to select from the objects.\n * @param {T[]} arr - The array of objects.\n * @param {K} property - The property to select from each object.\n * @returns {Array<T[K]>} - An array of the selected properties.\n *\n * @example\n * selectBy([{ a: 1, b: 2 }, { a: 3, b: 4 }], 'b')\n * // Returns [2, 4]\n *\n * @example\n * selectBy([{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }], 'name')\n * // Returns ['John', 'Jane']\n */\nexport const selectBy = <T extends Record<string, unknown>, K extends keyof T>(\n  arr: T[],\n  property: K,\n): T[K][] =>\n  arr.flatMap(item => (Object.hasOwn(item, property) ? [item[property]] : []))\n\n/**\n * Applies a transformation function to a specific property of each object in an array.\n *\n * @template T - The type of the objects in the array.\n * @template K - The type of the key to select from the objects.\n * @template R - The type of the result of the transformation function.\n * @param {T[]} arr - The array of objects.\n * @param {K} property - The property to select from each object.\n * @param {(value: T[K]) => R} transform - The transformation function to apply to each selected property.\n * @returns {Array<R>} - An array of the transformed properties.\n *\n * @example\n * selectAndTransform([{ a: 1, b: 2 }, { a: 3, b: 4 }], 'b', value => value * 2)\n * // Returns [4, 8]\n *\n * @example\n * selectAndTransform([{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }], 'name', name => name.toUpperCase())\n * // Returns ['JOHN', 'JANE']\n */\nexport const selectAndTransform = <\n  T extends Record<string, unknown>,\n  K extends keyof T,\n  R,\n>(\n  arr: T[],\n  property: K,\n  transform: (value: T[K]) => R,\n): R[] =>\n  arr.flatMap(item =>\n    Object.hasOwn(item, property) ? [transform(item[property])] : [],\n  )\n",p={},c="Select a property in an array of objects",i={id:"snippets/Typescript/Array/select-by",title:"Select a property in an array of objects",description:"",source:"@site/docs/snippets/Typescript/Array/select-by.mdx",sourceDirName:"snippets/Typescript/Array",slug:"/snippets/Typescript/Array/select-by",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/select-by",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Array/select-by.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Find the element in an array with the lowest value for the specified key",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/min-by"},next:{title:"Sort an array by one of its properties",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/sort-by"}},y={},l=[];function m(e){const r={h1:"h1",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"select-a-property-in-an-array-of-objects",children:"Select a property in an array of objects"}),"\n",(0,n.jsx)(s.Z,{language:"ts",children:o})]})}function f(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);