"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[7068],{7585:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>y,default:()=>b,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=t(5893),a=t(1151),s=t(9286);const o="/**\n * Selects a specific key from each object in an array.\n *\n * @template Obj - The type of the objects in the array.\n * @template Key - The type of the key to select from the objects.\n * @param {Obj[]} arr - The array of objects.\n * @param {Key} key - The key to select from each object.\n * @returns {Array<Obj[Key]>} - An array of the selected properties.\n *\n * @example\n * selectBy([{ a: 1, b: 2 }, { a: 3, b: 4 }], 'b')\n * // Returns [2, 4]\n *\n * @example\n * selectBy([{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }], 'name')\n * // Returns ['John', 'Jane']\n */\nexport const selectBy = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n>(\n  arr: Obj[],\n  key: Key,\n): Obj[Key][] =>\n  arr.flatMap(item => (Object.hasOwn(item, key) ? [item[key]] : []))\n\n/**\n * Creates a function that selects a specific key's value from a given object.\n *\n * @template Obj - The type of the object.\n * @template Key - The type of the key to select.\n * @param {Key} key - The key to select.\n * @returns {function} A function that takes an object and returns the value of the selected key.\n *\n * @example\n * const selectById = createSelectBy<{ id: number, name: string }>('id');\n * const obj = { id: 1, name: 'John' };\n * console.log(selectById(obj)); // 1\n */\nexport const createSelectBy =\n  <Obj extends Record<string, unknown>, Key extends keyof Obj>(key: Key) =>\n  (item: Obj): Obj[Key] =>\n    item[key]\n\n/**\n * Applies a transformation function to a specific key of each object in an array.\n *\n * @template Obj - The type of the objects in the array.\n * @template Key - The type of the key to select from the objects.\n * @template R - The type of the result of the transformation function.\n * @param {Obj[]} arr - The array of objects.\n * @param {Key} key - The key to select from each object.\n * @param {(value: Obj[Key]) => R} transform - The transformation function to apply to each selected key.\n * @returns {Array<R>} - An array of the transformed properties.\n *\n * @example\n * selectAndTransform([{ a: 1, b: 2 }, { a: 3, b: 4 }], 'b', value => value * 2)\n * // Returns [4, 8]\n *\n * @example\n * selectAndTransform([{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }], 'name', name => name.toUpperCase())\n * // Returns ['JOHN', 'JANE']\n */\nexport const selectAndTransform = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n  R,\n>(\n  arr: Obj[],\n  key: Key,\n  transform: (value: Obj[Key]) => R,\n): R[] =>\n  arr.flatMap(item => (Object.hasOwn(item, key) ? [transform(item[key])] : []))\n",c={},y="Select a property in an array of objects",i={id:"snippets/Typescript/Array/select-by",title:"Select a property in an array of objects",description:"",source:"@site/docs/snippets/Typescript/Array/select-by.mdx",sourceDirName:"snippets/Typescript/Array",slug:"/snippets/Typescript/Array/select-by",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/select-by",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Array/select-by.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Find the element in an array with the lowest value for the specified key",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/min-by"},next:{title:"Sort an array by one of its properties",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/sort-by"}},p={},l=[];function m(e){const n={h1:"h1",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"select-a-property-in-an-array-of-objects",children:"Select a property in an array of objects"}),"\n",(0,r.jsx)(s.Z,{language:"ts",children:o})]})}function b(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);