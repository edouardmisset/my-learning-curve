"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[35],{6475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>p,metadata:()=>o,toc:()=>l});var r=n(5893),s=n(1151),a=n(9286);const c="/**\n * Creates a new object with the same keys as the given object,\n * and values generated by running each own enumerable string keyed property of the object thru the function.\n *\n * @param {Object.<string, ObjectValue>} object - The object to iterate over.\n * @param {(value: ObjectValue) => Returned} fn - The function invoked per iteration.\n * @returns {Object.<string, Returned>} The new object with the same keys and mapped values.\n *\n * @template ObjectValue The type of the values in the input object.\n * @template Returned The type of the values in the returned object.\n *\n * @example\n * const object = { a: 1, b: 2 };\n * const fn = (value) => value * 2;\n * const result = mapObject(object, fn); // { a: 2, b: 4 }\n */\nexport const mapObject = <\n  ObjectValue,\n  Returned,\n  Result extends Record<string, Returned>,\n>(\n  object: { [key: string]: ObjectValue },\n  fn: (value: ObjectValue) => Returned,\n): Result =>\n  Object.fromEntries(\n    Object.entries(object).map(([key, value]) => [key, fn(value)]),\n  ) as Result\n",p={},i="Map over object",o={id:"snippets/Typescript/map-object",title:"Map over object",description:"",source:"@site/docs/snippets/Typescript/map-object.mdx",sourceDirName:"snippets/Typescript",slug:"/snippets/Typescript/map-object",permalink:"/my-learning-curve/docs/snippets/Typescript/map-object",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/map-object.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Helpers",permalink:"/my-learning-curve/docs/snippets/Typescript/helpers"},next:{title:"Pipe & Compose",permalink:"/my-learning-curve/docs/snippets/Typescript/pipe"}},u={},l=[];function b(e){const t={h1:"h1",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"map-over-object",children:"Map over object"}),"\n",(0,r.jsx)(a.Z,{language:"ts",children:c})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}}}]);