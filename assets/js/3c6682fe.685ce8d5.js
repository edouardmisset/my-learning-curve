"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9563],{5947:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>b,frontMatter:()=>i,metadata:()=>p,toc:()=>h});var n=s(5893),o=s(1151),r=s(9286);const a="import { ObjectType, objectKeys } from './type-helpers'\n\n/**\n * @description Performs a shallow comparison between two objects of the same type.\n * It checks if both objects have the same keys and if the values for these keys are the same in both objects.\n *\n * @template T The type of the objects to compare.\n * @param {T} leftObject The first object to compare.\n * @param {T} rightObject The second object to compare.\n * @returns {boolean} True if the objects have the same keys and the same values for each key, false otherwise.\n *\n * @example\n * const obj1 = { a: 1, b: 2 };\n * const obj2 = { b: 2, a: 1 };\n * const obj3 = { a: 1, b: 3 };\n * console.log(shallowComparison(obj1, obj2)); // Outputs: true\n * console.log(shallowComparison(obj1, obj3)); // Outputs: false\n */\nexport const shallowComparison = <T extends ObjectType>(\n  leftObject: T,\n  rightObject: T,\n): boolean => {\n  const leftKeys = objectKeys(leftObject).sort()\n  const rightKeys = objectKeys(rightObject).sort()\n\n  if (leftKeys.length !== rightKeys.length) return false\n\n  return leftKeys.every(\n    (key, index) =>\n      key === rightKeys[index] && leftObject[key] === rightObject[key],\n  )\n}\n\n/**\n * @description Alias for the {@link shallowComparison} function.\n */\nexport const isEqual = shallowComparison\n",i={},c="Shallow comparison",p={id:"snippets/Typescript/shallow-comparison",title:"Shallow comparison",description:"",source:"@site/docs/snippets/Typescript/shallow-comparison.mdx",sourceDirName:"snippets/Typescript",slug:"/snippets/Typescript/shallow-comparison",permalink:"/my-learning-curve/docs/snippets/Typescript/shallow-comparison",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/shallow-comparison.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Sets",permalink:"/my-learning-curve/docs/snippets/Typescript/sets"},next:{title:"Sleep",permalink:"/my-learning-curve/docs/snippets/Typescript/sleep"}},l={},h=[];function m(e){const t={h1:"h1",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"shallow-comparison",children:"Shallow comparison"}),"\n",(0,n.jsx)(r.Z,{language:"ts",children:a})]})}function b(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);