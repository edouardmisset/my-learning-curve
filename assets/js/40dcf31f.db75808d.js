"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[3578],{482:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=t(5893),s=t(1151),i=t(9286);const c="/**\n * Counts the number of elements in an array that satisfy a condition.\n *\n * @param {T[]} arr - The array to process.\n * @param {(arg: T) => boolean} checkFunction - The function to test each element of the array.\n * This function should accept a single argument of type T (the type of elements in the array)\n * and return a boolean.\n *\n * @returns {number} The number of elements that satisfy the condition.\n *\n * @template T The type of elements in the array.\n *\n * @example\n * const arr = [1, 2, 3, 4, 5];\n * const isEven = (num) => num % 2 === 0;\n * const count = countBy(arr, isEven); // 2\n */\nexport const countBy = <T>(arr: T[], checkFunction: (arg: T) => boolean) =>\n  arr.reduce((count, value) => (checkFunction(value) ? count + 1 : count), 0)\n",o={},a="CountBy",p={id:"snippets/Typescript/count-by",title:"CountBy",description:"",source:"@site/docs/snippets/Typescript/count-by.mdx",sourceDirName:"snippets/Typescript",slug:"/snippets/Typescript/count-by",permalink:"/my-learning-curve/docs/snippets/Typescript/count-by",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/count-by.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Convert String Date",permalink:"/my-learning-curve/docs/snippets/Typescript/convert-string-date"},next:{title:"Find node in tree",permalink:"/my-learning-curve/docs/snippets/Typescript/find-node-in-tree"}},u={},l=[];function y(n){const e={h1:"h1",...(0,s.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"countby",children:"CountBy"}),"\n",(0,r.jsx)(i.Z,{language:"ts",children:c})]})}function d(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(y,{...n})}):y(n)}}}]);