"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[2155],{7474:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var t=s(5893),r=s(1151),o=s(9286);const d="type BasicNode = Record<string, any>\n\ninterface SearchTreeParameters<NodeType extends BasicNode = BasicNode> {\n  node: NodeType\n  searchTerm: string\n  subItemsField: keyof NodeType\n  searchItemField: keyof NodeType\n}\n\ntype SearchTreeListParameters<NodeType extends BasicNode = BasicNode> = Omit<\n  SearchTreeParameters<NodeType>,\n  'node'\n> & {\n  nodeList: NodeType[]\n}\n/**\n * @description Searches a tree of nodes for a node that matches the given search term.\n *\n * This function takes a node and a search term, and searches the node and its sub-nodes for a node where `node[searchItemField]` equals `searchTerm`.\n * It returns the first matching node, or `undefined` if no such node is found.\n *\n * This function uses the {@link searchTreeList} function to search a list of nodes.\n *\n * @template NodeType A type that extends `BasicNode`. This is the type of the nodes in the tree.\n *\n * @param {SearchTreeParameters<NodeType>} params The parameters for the search. This is an object that contains:\n * - `node`: The root node of the tree to search.\n * - `searchTerm`: The term to search for.\n * - `subItemsField`: The name of the field that contains the sub-nodes of a node.\n * - `searchItemField`: The name of the field to compare with the search term.\n *\n * @returns {undefined | NodeType} The first node where `node[searchItemField]` equals `searchTerm`, or `undefined` if no such node is found.\n *\n * @example\n * const node = { id: 1, name: 'Node 1', children: [{ id: 2, name: 'Node 2' }] };\n * const params = { node, searchTerm: 'Node 2', subItemsField: 'children', searchItemField: 'name' };\n * const foundNode = searchTree(params); // { id: 2, name: 'Node 2' }\n */\nexport const searchTree = <NodeType extends BasicNode = BasicNode>(\n  params: SearchTreeParameters<NodeType>,\n): undefined | NodeType => {\n  const { node, searchTerm, subItemsField, searchItemField } = params\n\n  if (!(subItemsField in node)) {\n    throw new TypeError(`${subItemsField.toString()} is missing from NodeType`)\n  }\n  if (!(searchItemField in node)) {\n    throw new TypeError(\n      `${searchItemField.toString()} is missing from NodeType`,\n    )\n  }\n\n  if (node[searchItemField] === searchTerm) return node\n\n  if (node[subItemsField] != null && node[subItemsField]?.length > 0) {\n    return searchTreeList({\n      nodeList: node[subItemsField],\n      searchTerm,\n      subItemsField,\n      searchItemField,\n    })\n  }\n}\n\n/**\n * @description Searches a list of nodes for a node that matches the given search term.\n *\n * This function iterates over a list of nodes and uses the `searchTree` function to search each node and its sub-nodes.\n * It returns the first node where `node[searchItemField]` equals `searchTerm`, or `undefined` if no such node is found.\n *\n * This function uses the {@link searchTree} function to search each node.\n *\n * @template NodeType A type that extends `BasicNode`. This is the type of the nodes in the list.\n *\n * @param {SearchTreeListParameters<NodeType>} params The parameters for the search. This is an object that contains:\n * - `nodeList`: The list of nodes to search.\n * - `searchTerm`: The term to search for.\n * - `subItemsField`: The name of the field that contains the sub-nodes of a node.\n * - `searchItemField`: The name of the field to compare with the search term.\n *\n * @returns {undefined | NodeType} The first node where `node[searchItemField]` equals `searchTerm`, or `undefined` if no such node is found.\n *\n * @example\n * const nodes = [{ id: 1, name: 'Node 1', children: [{ id: 2, name: 'Node 2' }] }];\n * const params = { nodeList: nodes, searchTerm: 'Node 2', subItemsField: 'children', searchItemField: 'name' };\n * const foundNode = searchTreeList(params); // { id: 2, name: 'Node 2' }\n */\nexport function searchTreeList<NodeType extends BasicNode = BasicNode>(\n  params: SearchTreeListParameters<NodeType>,\n): undefined | NodeType {\n  const { nodeList, searchTerm, subItemsField, searchItemField } = params\n\n  let foundNode: undefined | NodeType\n  for (const node of nodeList) {\n    foundNode = searchTree({\n      node,\n      searchTerm,\n      subItemsField,\n      searchItemField,\n    })\n    if (foundNode) return foundNode\n  }\n}\n",i={},a="Find node in tree",c={id:"snippets/Typescript/find-node-in-tree",title:"Find node in tree",description:"",source:"@site/docs/snippets/Typescript/find-node-in-tree.mdx",sourceDirName:"snippets/Typescript",slug:"/snippets/Typescript/find-node-in-tree",permalink:"/my-learning-curve/docs/snippets/Typescript/find-node-in-tree",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/find-node-in-tree.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"CountBy",permalink:"/my-learning-curve/docs/snippets/Typescript/count-by"},next:{title:"Group an array of object by a key",permalink:"/my-learning-curve/docs/snippets/Typescript/group-by"}},h={},m=[];function p(e){const n={h1:"h1",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"find-node-in-tree",children:"Find node in tree"}),"\n",(0,t.jsx)(o.Z,{language:"ts",children:d})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);