"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1633],{3287:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var s=r(5893),t=r(1151);const a={},i="Higher Order Functions",o={permalink:"/my-learning-curve/blog/05-higher-order-functions",editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/blog/05-higher-order-functions.md",source:"@site/blog/05-higher-order-functions.md",title:"Higher Order Functions",description:"Introduction",date:"2024-01-03T15:00:36.000Z",formattedDate:"January 3, 2024",tags:[],readingTime:3.35,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,nextItem:{title:"Typescript types",permalink:"/my-learning-curve/blog/01-types"}},c={authorsImageUrls:[]},d=[{value:"Introduction",id:"introduction",level:2},{value:"The concept",id:"the-concept",level:2},{value:"Currying and HOF",id:"currying-and-hof",level:3},{value:"The power of composition",id:"the-power-of-composition",level:2},{value:"HOFs in practice",id:"hofs-in-practice",level:2},{value:"Sources",id:"sources",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"In Javascript, functions are values (first-class citizens). This means that they can be assigned to a variable and/or passed as a value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const random = function () {\n  return Math.random()\n}\n\nconst giveMeRandom = random // assigns random to a variable\n"})}),"\n",(0,s.jsx)(n.p,{children:"This single piece of knowledge allows us to write functional programming in this language. In functional programming, we heavily use higher-order functions."}),"\n",(0,s.jsx)(n.h2,{id:"the-concept",children:"The concept"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Higher Order Functions"})," is simply a function that takes another function as an argument or returns a function.\nThis is possible because functions are ",(0,s.jsx)(n.strong,{children:"first class citizens"})," in JavaScript, which means that they can be passed as arguments, returned from other functions, and stored in variables as objects."]}),"\n",(0,s.jsxs)(n.p,{children:["NB: Taking an other function as an argument is often referred as a ",(0,s.jsx)(n.strong,{children:"callback"})," function, because it is called back by the higher-order function."]}),"\n",(0,s.jsxs)(n.p,{children:["NB 2: Returning a function is often referred as a ",(0,s.jsx)(n.strong,{children:"currying"})," function, because it returns a function that takes the remaining arguments."]}),"\n",(0,s.jsx)(n.h3,{id:"currying-and-hof",children:"Currying and HOF"}),"\n",(0,s.jsx)(n.p,{children:"More on that on a later episode.\nBasically, it allows us to write functions that take multiple arguments, and return a function that takes the remaining arguments.\nThis is often done in order to make a 'specific' function from a 'parent' function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"function curry(f) {\n  // curry(f) does the currying transform\n  return function (a) {\n    return function (b) {\n      return f(a, b)\n    }\n  }\n}\n\n// usage\nfunction sum(a, b) {\n  return a + b\n}\n\nconst curriedSum = curry(sum)\n\nconsole.log(curriedSum(1)(2)) // 3\n"})}),"\n",(0,s.jsxs)(n.p,{children:["NB: \u26a0\ufe0f Function expression are ",(0,s.jsx)(n.strong,{children:"NOT"})," hoisted."]}),"\n",(0,s.jsx)(n.h2,{id:"the-power-of-composition",children:"The power of composition"}),"\n",(0,s.jsx)(n.p,{children:"One of the great advantages of using higher order functions is composition."}),"\n",(0,s.jsx)(n.p,{children:"We can create smaller functions that only take care of one piece of logic. Then, we compose more complex functions by using different smaller functions."}),"\n",(0,s.jsx)(n.p,{children:"This technique reduces bugs and makes our code easier to read, understand and maintain."}),"\n",(0,s.jsx)(n.p,{children:"Below is an example of composition."}),"\n",(0,s.jsx)(n.p,{children:"Given a sample array of numbers, we want to get:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The average grade of this classroom"}),"\n",(0,s.jsx)(n.li,{children:"The average grade for the boys"}),"\n",(0,s.jsx)(n.li,{children:"The average grade for the girls"}),"\n",(0,s.jsx)(n.li,{children:"The highest & lowest grade for the boys"}),"\n",(0,s.jsx)(n.li,{children:"The highest & lowest grade for the girls"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// The data set\nconst grades = [\n  { name: 'John', grade: 8, sex: 'M' },\n  { name: 'Sarah', grade: 12, sex: 'F' },\n  { name: 'Bob', grade: 16, sex: 'M' },\n  { name: 'Johnny', grade: 2, sex: 'M' },\n  { name: 'Ethan', grade: 4, sex: 'M' },\n  { name: 'Paula', grade: 18, sex: 'F' },\n  { name: 'Donald', grade: 5, sex: 'M' },\n  { name: 'Jennifer', grade: 13, sex: 'F' },\n  { name: 'Courtney', grade: 15, sex: 'F' },\n  { name: 'Jane', grade: 9, sex: 'F' },\n]\n\n// The pure (simple) functions\nconst isBoy = student => student.sex === 'M'\n\nconst isGirl = student => student.sex === 'F'\n\nconst getBoys = grades => grades.filter(isBoy)\n\nconst getGirls = grades => grades.filter(isGirl)\n\nconst average = grades =>\n  grades.reduce((acc, current) => acc + current.grade, 0) / grades.length\n\nconst maxGrade = grades => Math.max(...grades.map(student => student.grade))\n\nconst minGrade = grades => Math.min(...grades.map(student => student.grade))\n\nconst classroomAverage = average(grades) // 10.2\nconst boysAverage = average(getBoys(grades)) // 7\nconst girlsAverage = average(getGirls(grades)) // 13.4\nconst highestGrade = maxGrade(grades) // 18\nconst lowestGrade = minGrade(grades) // 2\nconst highestBoysGrade = maxGrade(getBoys(grades)) // 16\nconst lowestBoysGrade = minGrade(getBoys(grades)) // 2\nconst highestGirlsGrade = maxGrade(getGirls(grades)) // 18\nconst lowestGirlsGrade = minGrade(getGirls(grades)) // 9\n"})}),"\n",(0,s.jsx)(n.p,{children:"The outer functions, average for example, always take as an input the output from the inner functions. Therefore, the only condition to composition is to make sure that the output and input match (\u26a0\ufe0f type checking)."}),"\n",(0,s.jsx)(n.p,{children:"And because each function is responsible for only one thing, it makes this code easier to debug and to test."}),"\n",(0,s.jsx)(n.h2,{id:"hofs-in-practice",children:"HOFs in practice"}),"\n",(0,s.jsx)(n.p,{children:"(TBC)"}),"\n",(0,s.jsx)(n.h2,{id:"sources",children:"Sources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Eloquent Javascript on ",(0,s.jsx)(n.a,{href:"https://eloquentjavascript.net/05_higher_order.html",children:"higher order"})]}),"\n",(0,s.jsxs)(n.li,{children:["Dam Cosset from dev.to on ",(0,s.jsx)(n.a,{href:"https://dev.to/damcosset/higher-order-functions-in-javascript-4j8b",children:"higher order functions in javascript"})]}),"\n",(0,s.jsxs)(n.li,{children:["Alex Devero on ",(0,s.jsx)(n.a,{href:"https://blog.alexdevero.com/higher-order-functions-javascript/",children:"HOF in JS"})]}),"\n",(0,s.jsxs)(n.li,{children:["Javascript.info on ",(0,s.jsx)(n.a,{href:"https://javascript.info/currying-partials",children:"Currying"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>i});var s=r(7294);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);