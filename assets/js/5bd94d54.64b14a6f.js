"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9772],{2354:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var c=s(4848),t=s(8453);const r={},a="Common RegExp",i={id:"snippets/Typescript/RegExp/common-regexp",title:"Common RegExp",description:"This is shamelessly stolen from the brilliant site 30secondsofcode",source:"@site/docs/snippets/Typescript/RegExp/common-regexp.md",sourceDirName:"snippets/Typescript/RegExp",slug:"/snippets/Typescript/RegExp/common-regexp",permalink:"/my-learning-curve/docs/snippets/Typescript/RegExp/common-regexp",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/RegExp/common-regexp.md",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Sort a plain object's values",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/sort-values"},next:{title:"Sets",permalink:"/my-learning-curve/docs/snippets/Typescript/Set/sets"}},h={},l=[{value:"Exact string match",id:"exact-string-match",level:2},{value:"Match empty string",id:"match-empty-string",level:2},{value:"Match whitespace sequences",id:"match-whitespace-sequences",level:2},{value:"Match line breaks",id:"match-line-breaks",level:2},{value:"Match email",id:"match-email",level:2},{value:"Match non-word characters",id:"match-non-word-characters",level:2},{value:"Match alphanumeric, dashes and hyphens",id:"match-alphanumeric-dashes-and-hyphens",level:2},{value:"Match letters and whitespaces",id:"match-letters-and-whitespaces",level:2},{value:"Pattern not included",id:"pattern-not-included",level:2},{value:"Text inside brackets",id:"text-inside-brackets",level:2},{value:"Validate GUID/UUID",id:"validate-guiduuid",level:2},{value:"Validate date format (DD/MM/YYYY)",id:"validate-date-format-ddmmyyyy",level:2},{value:"Chunk string into n-size chunks",id:"chunk-string-into-n-size-chunks",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"common-regexp",children:"Common RegExp"}),"\n",(0,c.jsxs)(n.p,{children:["This is shamelessly stolen from the brilliant site ",(0,c.jsx)(n.a,{href:"https://www.30secondsofcode.org/js/s/common-regexp-cheatsheet/",children:"30secondsofcode"})]}),"\n",(0,c.jsx)(n.h2,{id:"exact-string-match",children:"Exact string match"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string,\nrespectively."]}),"\n",(0,c.jsx)(n.li,{children:"Add the string you want to match in-between the two anchors."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^abc$/\n// Where 'abc' is the exact string you want to match\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-empty-string",children:"Match empty string"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsx)(n.li,{children:"Do not add any characters in-between to match an empty string."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^$/\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-whitespace-sequences",children:"Match whitespace sequences"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"\\s"})," meta-sequence to match any whitespace character, including spaces, tabs, newlines, etc."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"+"})," quantifier to match ",(0,c.jsx)(n.strong,{children:"one or more"})," occurrences of the previous character."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global flag ",(0,c.jsx)(n.code,{children:"g"})," to match ",(0,c.jsx)(n.strong,{children:"all"})," occurrences of the pattern in the string."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /\\s+/g\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-line-breaks",children:"Match line breaks"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Depending on the environment, line breaks can be represented in different ways."}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"\\r"})," character to match carriage returns, the ",(0,c.jsx)(n.code,{children:"\\n"})," character to match newlines, and the ",(0,c.jsx)(n.code,{children:"\\r\\n"})," sequence to match carriage returns followed by newlines."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global ",(0,c.jsx)(n.code,{children:"g"})," and multiline ",(0,c.jsx)(n.code,{children:"m"})," flags to match all occurrences of the pattern in the string."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /\\r|\\n|\\r\\n/gm\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-email",children:"Match email"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string,\nrespectively."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the ",(0,c.jsx)(n.strong,{children:"ignore case"})," flag ",(0,c.jsx)(n.code,{children:"i"})," to match both uppercase and lowercase\ncharacters."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"+"})," quantifier to match ",(0,c.jsx)(n.strong,{children:"one or more"})," occurrences of the previous\ncharacter."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp =\n  /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-non-word-characters",children:"Match non-word characters"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use negation ",(0,c.jsx)(n.code,{children:"^"})," to match any character that is not a word character ",(0,c.jsx)(n.code,{children:"\\w"})," or a whitespace character ",(0,c.jsx)(n.code,{children:"\\s"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global flag ",(0,c.jsx)(n.code,{children:"g"})," to match ",(0,c.jsx)(n.strong,{children:"all"})," occurrences of the pattern in the string."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the ",(0,c.jsx)(n.strong,{children:"ignore case"})," flag ",(0,c.jsx)(n.code,{children:"i"})," to match both uppercase and lowercase characters."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /[^\\w\\s]/gi\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-alphanumeric-dashes-and-hyphens",children:"Match alphanumeric, dashes and hyphens"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"a-zA-Z0-9-"})," pattern to match any alphanumeric character, dashes and hyphens."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"+"})," quantifier to match ",(0,c.jsx)(n.strong,{children:"one or more"})," occurrences of the previous character."]}),"\n",(0,c.jsx)(n.li,{children:"Particularly useful when matching URL slugs."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^[a-zA-Z0-9-_]+$/\n"})}),"\n",(0,c.jsx)(n.h2,{id:"match-letters-and-whitespaces",children:"Match letters and whitespaces"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"a-zA-Z\\s"})," pattern to match any letter and whitespace character."]}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"+"})," quantifier to match ",(0,c.jsx)(n.strong,{children:"one or more"})," occurrences of the previous pattern."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^[A-Za-z\\s]+$/\n"})}),"\n",(0,c.jsx)(n.h2,{id:"pattern-not-included",children:"Pattern not included"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsxs)(n.li,{children:["Use a negative lookahead ",(0,c.jsx)(n.code,{children:"?!"})," to match any character that is not followed by the pattern you want to exclude."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global flag ",(0,c.jsx)(n.code,{children:"g"})," to match all occurrences of the pattern in the string."]}),"\n",(0,c.jsxs)(n.li,{children:["To ensure more than one pattern is ",(0,c.jsx)(n.strong,{children:"not included"}),", use the ",(0,c.jsx)(n.code,{children:"|"})," character to separate them."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^((?!(abc|bcd)).)*$/\n// Where 'abc' and 'bcd' are pattern you want to exclude\n"})}),"\n",(0,c.jsx)(n.h2,{id:"text-inside-brackets",children:"Text inside brackets"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Use the ( and ) characters to match the opening and closing brackets, respectively."}),"\n",(0,c.jsx)(n.li,{children:"Use a capturing group between the two and exclude the closing parenthesis character."}),"\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"+"})," quantifier to match ",(0,c.jsx)(n.strong,{children:"one or more"})," characters, as needed."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global flag ",(0,c.jsx)(n.code,{children:"g"})," to match ",(0,c.jsx)(n.strong,{children:"all"})," occurrences of the pattern in the string."]}),"\n",(0,c.jsx)(n.li,{children:"Replace ( and ) with [ and ] to match square brackets and with { and } to match curly brackets."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /\\(([^)]+)\\)/g\n"})}),"\n",(0,c.jsx)(n.h2,{id:"validate-guiduuid",children:"Validate GUID/UUID"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsx)(n.li,{children:"Validate each segment of the GUID/UUID separately using numeric character ranges and quantifiers."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp =\n  /^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-(8|9|a|b)[0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$/\n"})}),"\n",(0,c.jsx)(n.h2,{id:"validate-date-format-ddmmyyyy",children:"Validate date format (DD/MM/YYYY)"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:"^"})," and ",(0,c.jsx)(n.code,{children:"$"})," anchors to match the ",(0,c.jsx)(n.strong,{children:"start"})," and ",(0,c.jsx)(n.strong,{children:"end"})," of the string, respectively."]}),"\n",(0,c.jsx)(n.li,{children:"Validate each segment of the date separately using numeric character ranges and quantifiers."}),"\n",(0,c.jsx)(n.li,{children:"Alter the order of the segments and separators to match different formats."}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /^(0?[1-9]|[12][0-9]|3[01])[\\/\\-](0?[1-9]|1[012])[\\/\\-]\\d{4}$/\n"})}),"\n",(0,c.jsx)(n.h2,{id:"chunk-string-into-n-size-chunks",children:"Chunk string into n-size chunks"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Use the ",(0,c.jsx)(n.code,{children:".{1,n}"})," quantifier to match any character between ",(0,c.jsx)(n.strong,{children:"1 and n times"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["Add the global flag ",(0,c.jsx)(n.code,{children:"g"})," to match ",(0,c.jsx)(n.strong,{children:"all occurrences"})," of the pattern in the string."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"const regexp = /.{1,2}/g\n// Where '2' is the number of characters per chunk\n"})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);