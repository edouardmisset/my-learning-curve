"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[7003],{2323:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>j,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var n=s(4848),r=s(8453),o=s(1432);const a="/**\n * Sorts the values of an object and returns a new object with the sorted values.\n *\n * @template Obj - The type of the object.\n * @param {Obj} obj - The object whose values are to be sorted.\n * @param {boolean} [ascending=true] - Whether to sort the values in ascending order. If false, the values are sorted in descending order.\n * @returns {Obj} A new object with the sorted values.\n *\n * @example\n * const objStr = { a: 'z', b: 'y', c: 'x' };\n * const sortedObjStrAsc = sortValues(objStr);\n * console.log(sortedObjStrAsc); // { c: 'x', b: 'y', a: 'z' }\n * const sortedObjStrDesc = sortValues(objStr, false);\n * console.log(sortedObjStrDesc); // { a: 'z', b: 'y', c: 'x' }\n *\n * @example\n * const objNum = { a: 3, b: 2, c: 1 };\n * const sortedObjNumAsc = sortValues(objNum);\n * console.log(sortedObjNumAsc); // { c: 1, b: 2, a: 3 }\n * const sortedObjNumDesc = sortValues(objNum, false);\n * console.log(sortedObjNumDesc); // { a: 3, b: 2, c: 1 }\n */\nexport const sortValues = <Obj extends Record<string, number | string>>(\n  obj: Obj,\n  ascending = true,\n): Obj =>\n  Object.fromEntries(\n    Object.entries(obj).sort(\n      ([, leftValue], [, rightValue]) =>\n        (typeof leftValue === 'string' && typeof rightValue === 'string'\n          ? leftValue.localeCompare(rightValue)\n          : leftValue > rightValue\n            ? 1\n            : -1) * (ascending ? 1 : -1),\n    ),\n  ) as Obj\n",c={},l="Sort a plain object's values",i={id:"snippets/Typescript/Object/sort-values",title:"Sort a plain object's values",description:"",source:"@site/docs/snippets/Typescript/Object/sort-values.mdx",sourceDirName:"snippets/Typescript/Object",slug:"/snippets/Typescript/Object/sort-values",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/sort-values",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Object/sort-values.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Sort an Object Keys",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/sort-keys"},next:{title:"Common RegExp",permalink:"/my-learning-curve/docs/snippets/Typescript/RegExp/common-regexp"}},p={},u=[];function b(e){const t={h1:"h1",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"sort-a-plain-objects-values",children:"Sort a plain object's values"}),"\n",(0,n.jsx)(o.A,{language:"ts",children:a})]})}function j(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(b,{...e})}):b(e)}}}]);