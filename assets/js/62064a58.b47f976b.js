"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[5770],{7168:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=r(5893),s=r(1151);const t={},l="Git branch strategies",o={id:"documentation/git-workflow",title:"Git branch strategies",description:"The following strategies are the most popular strategies used.",source:"@site/docs/documentation/06-git-workflow.md",sourceDirName:"documentation",slug:"/documentation/git-workflow",permalink:"/my-learning-curve/docs/documentation/git-workflow",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/docs/documentation/06-git-workflow.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Merge Request / Pull Request",permalink:"/my-learning-curve/docs/documentation/merge-request-recommandations"}},a={},c=[{value:"GitFlow Branch Strategy:",id:"gitflow-branch-strategy",level:2},{value:"GitHub Flow Branch Strategy:",id:"github-flow-branch-strategy",level:2},{value:"GitLab Flow Branch Strategy:",id:"gitlab-flow-branch-strategy",level:2},{value:"More resources:",id:"more-resources",level:2}];function d(e){const n={a:"a",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"git-branch-strategies",children:"Git branch strategies"}),"\n",(0,i.jsx)(n.p,{children:"The following strategies are the most popular strategies used.\nIn order of complexity, they are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://guides.github.com/introduction/flow/",children:"GitHub Flow Guide"})," & ",(0,i.jsx)(n.a,{href:"https://githubflow.github.io/",children:"GitHub Flow"})]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://about.gitlab.com/blog/2023/07/27/gitlab-flow-duo/",children:"GitLab Flow Guide"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nvie.com/posts/a-successful-git-branching-model/",children:"GitFlow"})," by\nVincent Driessen (Original blog post) & ",(0,i.jsx)(n.a,{href:"https://github.com/nvie/gitflow",children:"GitFlow on GitHub"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"gitflow-branch-strategy",children:"GitFlow Branch Strategy:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overview:"})," GitFlow is a branching model that defines a strict branching structure."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Branches:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"main:"})," Represents production-ready code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"develop:"})," Integration branch for ongoing development."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"feature:"})," Individual features developed in separate branches."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"release:"})," Prepares for a new production release."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"hotfix:"})," Addresses critical issues in the production code."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Workflow:"})," Features merge into develop, releases merge into main and develop, hotfixes merge into main and develop."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Well-defined structure, suitable for larger projects."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons:"})," Can be complex for smaller projects, and feature branches may lead to longer development cycles."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.a,{href:"https://danielkummer.github.io/git-flow-cheatsheet/",children:["GitFlow cheatsheet & ",(0,i.jsx)(n.strong,{children:"tool"})," (",(0,i.jsx)(n.em,{children:"avh"}),")"]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://nvie.com/img/git-model@2x.png",alt:"GitFlow Diagram"})}),"\n",(0,i.jsx)(n.h2,{id:"github-flow-branch-strategy",children:"GitHub Flow Branch Strategy:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overview:"})," GitHub Flow is a lightweight, simplified branching model."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Branches:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"main:"})," Represents the main development line."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"feature:"})," Features developed in individual branches."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Workflow:"})," Developers create feature branches, open pull requests for discussion, and merge directly into the main branch after review."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Simple and streamlined, encourages continuous delivery."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons:"})," May not be suitable for complex release management."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"gitlab-flow-branch-strategy",children:"GitLab Flow Branch Strategy:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Overview:"})," GitLab Flow is similar to GitHub Flow with a focus on CI/CD and collaboration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Branches:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"main:"})," Represents the main development line."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"feature:"})," Features developed in individual branches."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Production:"})," Represents the production-ready code."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Workflow:"})," Developers create feature branches, open merge requests for discussion, and merge into the main and production branches after review."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pros:"})," Emphasizes CI/CD, seamless collaboration, and production tracking."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cons:"})," May require additional setup for CI/CD pipelines."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"more-resources",children:"More resources:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Comparing\nworkflows by\n",(0,i.jsx)(n.a,{href:"https://www.atlassian.com/git/tutorials/comparing-workflows",children:"Atlassian"})," and ",(0,i.jsx)(n.a,{href:"https://www.gitkraken.com/learn/git/best-practices/git-branch-strategy",children:"GitKraken"})]}),"\n",(0,i.jsxs)(n.li,{children:["GitFlow\nby\n",(0,i.jsx)(n.a,{href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",children:"Atlassian"}),"\nand by ",(0,i.jsx)(n.a,{href:"https://www.gitkraken.com/learn/git/git-flow",children:"GitKraken"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>l});var i=r(7294);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);