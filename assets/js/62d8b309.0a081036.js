"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[4327],{7032:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>u,metadata:()=>o,toc:()=>p});var i=a(4848),r=a(8453),m=a(1432);const t="type Scale = (params: {\n  inMinimum: number\n  inMaximum: number\n  outMinimum?: number\n  outMaximum?: number\n  value: number\n}) => number\n\n/**\n * Scales a value from one range to another.\n *\n * @param {Object} params - The scaling parameters.\n * @param {number} params.inMinimum - The lower bound of the original range.\n * @param {number} params.inMaximum - The upper bound of the original range.\n * @param {number} [params.outMinimum=0] - The lower bound of the target range.\n * @param {number} [params.outMaximum=1] - The upper bound of the target range.\n * @param {number} params.value - The value to scale.\n * @returns {number} The scaled value.\n * @throws {Error} Will throw an error if inMinimum equals inMaximum (to prevent division by zero).\n *\n * @example\n * // Scale a value from [0, 10] to [0, 100]\n * scale({ inMinimum: 0, inMaximum: 10, outMinimum: 0, outMaximum: 100, value: 5 });\n * // returns 50\n *\n * @example\n * // Scale a value from [0, 100] to the default range [0, 1]\n * const normalizedValue = scale({ inMinimum: 0, inMaximum: 100, value: 50 });\n * console.log(normalizedValue); // Output: 0.5\n */\nexport const scale: Scale = params => {\n  const { inMinimum, inMaximum, outMinimum = 0, outMaximum = 1, value } = params\n  if (inMinimum === inMaximum)\n    throw new Error(\n      `inMinimum (${inMinimum}) cannot equal inMaximum (${inMaximum}) as this leads to a division by 0.`,\n    )\n  return (\n    ((value - inMinimum) * (outMaximum - outMinimum)) /\n      (inMaximum - inMinimum) +\n    outMinimum\n  )\n}\n",u={},s="Scale a value from one range to another",o={id:"snippets/Typescript/Number/scale",title:"Scale a value from one range to another",description:"This is useful to normalize data.",source:"@site/docs/snippets/Typescript/Number/scale.mdx",sourceDirName:"snippets/Typescript/Number",slug:"/snippets/Typescript/Number/scale",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/scale",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Number/scale.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Round a number to a specified precision",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/round-to-precision"},next:{title:"Standard Deviation and Variance",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/standard-deviation"}},l={},p=[];function c(e){const n={h1:"h1",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"scale-a-value-from-one-range-to-another",children:"Scale a value from one range to another"}),"\n",(0,i.jsx)(n.p,{children:":note: This is useful to normalize data."}),"\n",(0,i.jsx)(m.A,{language:"ts",children:t})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);