"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1245],{101:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>m,toc:()=>l});var s=n(5893),r=n(1151),a=n(9286);const o='{\n  "editor.formatOnPaste": true,\n  "editor.formatOnSave": true,\n  "editor.tabSize": 2,\n  "eslint.enable": true,\n  "javascript.format.insertSpaceAfterSemicolonInForStatements": false,\n  "typescript.format.insertSpaceAfterSemicolonInForStatements": false,\n  "javascript.format.semicolons": "remove",\n  "typescript.format.semicolons": "remove",\n  "javascript.updateImportsOnFileMove.enabled": "always",\n  "typescript.updateImportsOnFileMove.enabled": "always",\n  "typescript.tsdk": "node_modules/typescript/lib",\n  "search.exclude": {\n    "**/*.tgz": true\n  },\n  "folderTemplates.structures": [\n    {\n      "name": "Component",\n      "customVariables": [],\n      "omitParentDirectory": true,\n      "structure": [\n        {\n          "fileName": "__tests__/<FTName>.test.tsx",\n          "template": "UnitTest"\n        }\n      ],\n      "openFilesWhenDone": ["__tests__/<FTName>.test.tsx"]\n    },\n    {\n      "name": "Component Tests",\n      "customVariables": [],\n      "omitParentDirectory": true,\n      "structure": [\n        {\n          "fileName": "__tests__/<FTName>.test.tsx",\n          "template": "BascicTestImports"\n        }\n      ],\n      "openFilesWhenDone": ["__tests__/<FTName>.test.tsx"]\n    }\n  ],\n  "folderTemplates.fileTemplates": {\n    "Typescript Functional Component": [\n      "export function <FTName>(): React.JSX.Element {",\n      "return <div><FTName></div>",\n      "}"\n    ],\n    "IndexFile": "export * from \'./<FTName>\'",\n    "UnitTest": [\n      "import { screen, render } from \'test-utils\'",\n      "",\n      "import <FTName|pascalcase> from \'../<FTName|kebabcase>\'",\n      "import { <FTName|pascalcase>Props} from \'../types\'",\n      "",\n      "const default<FTName|pascalcase>Props: <FTName|pascalcase>Props = {",\n      "",\n      "",\n      "}",\n      "",\n      "const custom<FTName|pascalcase>Props: <FTName|pascalcase>Props = {",\n      "",\n      "",\n      "}",\n      "",\n      "describe(\'<FTName|pascalcase> should render with\', () => {",\n      "it(\'default properties\', () => {",\n      "render(<<FTName|pascalcase> {...default<FTName|pascalcase>Props",\n      "} />)",\n      "screen.debug()",\n      "const <FTName|camelcase> = screen.getByRole()",\n      "expect(<FTName|camelcase>).toMatchSnapshot()",\n      "})",\n      "})"\n    ],\n    "BascicTestImports": "import { thinRender, screen } from \'test-utils\'"\n  },\n  "conventionalCommits.scopes": [\n    "API",\n    "Nav",\n    "Configuration",\n    "Dev-Env",\n    "Lib",\n    "License",\n    "Localization",\n    "Maintenance",\n    "Package-Update",\n    "Script",\n    "Style",\n    "Doc",\n    "Helper",\n    "Auth",\n    "Network",\n    "Error-Handling"\n  ],\n  "[javascript]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[javascriptreact]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[typescript]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[typescriptreact]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[json]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[html]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "[css]": {\n    "editor.defaultFormatter": "esbenp.prettier-vscode"\n  },\n  "conventionalCommits.emojiFormat": "emoji",\n  "conventionalCommits.promptBody": false,\n  "conventionalCommits.promptFooter": false,\n  "restoreTerminals.terminals": [\n    {\n      "splitTerminals": [\n        {\n          "name": "Dev server",\n          "icon": "run"\n        },\n        {\n          "name": "Git",\n          "icon": "git-branch"\n        }\n      ]\n    }\n  ],\n  "cSpell.language": "en,fr",\n  "cSpell.words": ["MULILINETEXT"]\n}\n',i={},c="VS Code Settings",m={id:"setup/vscode.settings",title:"VS Code Settings",description:"These are my basic VS Code settings (.vscode/settings.json).",source:"@site/docs/setup/vscode.settings.mdx",sourceDirName:"setup",slug:"/setup/vscode.settings",permalink:"/my-learning-curve/docs/setup/vscode.settings",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/setup/vscode.settings.mdx",tags:[],version:"current",frontMatter:{},sidebar:"setupSidebar",previous:{title:"Keyboard Shortcut for VS Code (macOS)",permalink:"/my-learning-curve/docs/setup/vs-code-shortcuts"}},p={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"vs-code-settings",children:"VS Code Settings"}),"\n",(0,s.jsxs)(t.p,{children:["These are my basic VS Code settings (",(0,s.jsx)(t.a,{href:"https://code.visualstudio.com/docs/getstarted/settings",children:(0,s.jsx)(t.code,{children:".vscode/settings.json"})}),")."]}),"\n",(0,s.jsx)(a.Z,{language:"json",children:o})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);