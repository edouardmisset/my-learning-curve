"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9749],{1428:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var o=t(4848),r=t(8453);const s={},a="Folder structure",c={id:"documentation/Project Collaboration/folder-structure",title:"Folder structure",description:"Component / Page",source:"@site/docs/documentation/Project Collaboration/03-folder-structure.md",sourceDirName:"documentation/Project Collaboration",slug:"/documentation/Project Collaboration/folder-structure",permalink:"/my-learning-curve/docs/documentation/Project Collaboration/folder-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/documentation/Project Collaboration/03-folder-structure.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Naming Conventions",permalink:"/my-learning-curve/docs/documentation/Project Collaboration/naming-conventions"},next:{title:"Component Structure",permalink:"/my-learning-curve/docs/documentation/Project Collaboration/component-structure"}},i={},l=[{value:"Component / Page",id:"component--page",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"folder-structure",children:"Folder structure"}),"\n",(0,o.jsx)(n.h2,{id:"component--page",children:"Component / Page"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-txt",children:"component-name\n\u251c\u2500\u2500 helpers.ts               // Contains the helper functions and all the other functions needed by the component\n\u251c\u2500\u2500 index.ts                 // Exports the component (`export * from './component-name'`)\n\u251c\u2500\u2500 component-name.tsx       // Contains the actual component\n\u251c\u2500\u2500 styles.ts                // Contains the styled components\n\u251c\u2500\u2500 constants.ts             // Contains the constants used for the component\n\u251c\u2500\u2500 types.ts                 // Contains the types (props ans others) used for the component\n\u251c\u2500\u2500 hooks.ts                 // Contains the hooks used for the component\n\u2514\u2500\u2500 component-name.tests.ts  // Contains the unit tests for the component (can also be located into a separate \"__tests__\" folder)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f: ",(0,o.jsx)(n.code,{children:"default export"}),"s are used for lazy loading components (mainly pages and\nvery large components). This is to increase first load speed.In this case, we do\nnot use ",(0,o.jsx)(n.code,{children:"index.ts"})," files."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Like in the example above, in a perfect world, we would be using a\n",(0,o.jsx)(n.strong,{children:"kebab-case"})," naming convention for all folders and files, because PascalCase\nnamed folders/files are handled differently in the diversity of operating\nsystems which may lead to bugs when working with teams using different OSs.\n~ ",(0,o.jsx)(n.a,{href:"https://www.robinwieruch.de/react-folder-structure/",children:"Robin Wieruch"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);