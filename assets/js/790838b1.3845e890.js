"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[2133],{2681:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>p,default:()=>b,frontMatter:()=>y,metadata:()=>a,toc:()=>m});var s=n(4848),i=n(8453),o=n(1432);const c="import type { Prettify } from '../Type/type-helpers'\n\n/**\n * Picks the specified keys from an object and returns a new object with these keys.\n *\n * @template Obj - The type of the object.\n * @template Key - The type of the keys to pick.\n * @param {Obj} obj - The object to pick keys from.\n * @param {Key[]} keys - The array of keys to pick.\n * @returns {Prettify<Pick<Obj, Key>>} A new object with the picked keys.\n *\n * @example\n * const obj = { name: 'John', age: 30, city: 'New York' };\n * const keys = ['name', 'city'] satisfies (keyof typeof obj)[];\n * const picked = pick(obj, keys);\n * console.log(picked); // { name: 'John', city: 'New York' }\n */\nexport const pick = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n>(\n  obj: Obj,\n  keys: Key[],\n): Prettify<Pick<Obj, Key>> =>\n  Object.fromEntries(keys.map(key => [key, obj[key]])) as Prettify<\n    Pick<Obj, Key>\n  >\n",r="import type { Prettify } from '../Type/type-helpers'\n\n/**\n * Omits the specified keys from an object and returns a new object with these keys.\n *\n * @template Obj - The type of the object.\n * @template Key - The type of the keys to omit.\n * @param {Obj} obj - The object to omit keys from.\n * @param {Key[]} keys - The array of keys to omit.\n * @returns {Prettify<omit<Obj, Key>>} A new object with the omitted keys.\n *\n * @example\n * const obj = { name: 'John', age: 30, city: 'New York' };\n * const keys = ['name', 'city'] satisfies (keyof typeof obj)[]\n * const omitted = omit(obj, keys);\n * console.log(omitted); // {  age: 30 }\n */\nexport const omit = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n>(\n  obj: Obj,\n  keys: Key[],\n): Prettify<Omit<Obj, Key>> => {\n  const keysToOmit = new Set(keys)\n  return Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !keysToOmit.has(key as Key)),\n  ) as Prettify<Omit<Obj, Key>>\n}\n",y={},p="Pick and omit keys from an object",a={id:"snippets/Typescript/Object/pick-omit-keys",title:"Pick and omit keys from an object",description:"Pick",source:"@site/docs/snippets/Typescript/Object/pick-omit-keys.mdx",sourceDirName:"snippets/Typescript/Object",slug:"/snippets/Typescript/Object/pick-omit-keys",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/pick-omit-keys",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Object/pick-omit-keys.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Get the size (number of keys) of an object",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/object-size"},next:{title:"Shallow comparison",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/shallow-comparison"}},k={},m=[{value:"Pick",id:"pick",level:2}];function j(e){const t={h1:"h1",h2:"h2",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"pick-and-omit-keys-from-an-object",children:"Pick and omit keys from an object"}),"\n",(0,s.jsx)(t.h2,{id:"pick",children:"Pick"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:c}),"\n",(0,s.jsx)(t.h1,{id:"omit",children:"Omit"}),"\n",(0,s.jsx)(o.A,{language:"ts",children:r})]})}function b(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}}}]);