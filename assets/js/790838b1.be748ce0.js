"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1593],{8514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>a,default:()=>b,frontMatter:()=>y,metadata:()=>p,toc:()=>m});var i=n(5893),s=n(1151),o=n(9286);const r="import type { Prettify } from '../Type/type-helpers'\n\n/**\n * Picks the specified keys from an object and returns a new object with these keys.\n *\n * @template Obj - The type of the object.\n * @template Key - The type of the keys to pick.\n * @param {Obj} obj - The object to pick keys from.\n * @param {Key[]} arr - The array of keys to pick.\n * @returns {Prettify<Pick<Obj, Key>>} A new object with the picked keys.\n *\n * @example\n * const obj = { name: 'John', age: 30, city: 'New York' };\n * const keys = ['name', 'city'] satisfies (keyof typeof obj)[];\n * const picked = pick(obj, keys);\n * console.log(picked); // { name: 'John', city: 'New York' }\n */\nexport const pick = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n>(\n  obj: Obj,\n  arr: Key[],\n): Prettify<Pick<Obj, Key>> => {\n  const keysToPick = new Set(arr)\n  return Object.fromEntries(\n    Object.entries(obj).filter(([key]) => keysToPick.has(key as Key)),\n  ) as Prettify<Pick<Obj, Key>>\n}\n\n// Alternative\n\n// export const pickReduce = <Obj extends Record<string, unknown>, Key extends keyof T>(\n//   obj: Obj,\n//   keys: Key[],\n// ): Prettify<Pick<Obj, Key>> =>\n//   keys.reduce(\n//     (obj, key) => {\n//       if (Object.hasOwn(obj, key)) {\n//         obj[key] = obj[key]\n//       }\n//       return obj\n//     },\n//     {} as Prettify<Pick<Obj, Key>>,\n//   )\n",c="import type { Prettify } from '../Type/type-helpers'\n\n/**\n * Omits the specified keys from an object and returns a new object with these keys.\n *\n * @template Obj - The type of the object.\n * @template Key - The type of the keys to omit.\n * @param {Obj} obj - The object to omit keys from.\n * @param {Key[]} arr - The array of keys to omit.\n * @returns {Prettify<omit<Obj, Key>>} A new object with the omitted keys.\n *\n * @example\n * const obj = { name: 'John', age: 30, city: 'New York' };\n * const keys = ['name', 'city'] satisfies (keyof typeof obj)[]\n * const omitted = omit(obj, keys);\n * console.log(omitted); // {  age: 30 }\n */\nexport const omit = <\n  Obj extends Record<string, unknown>,\n  Key extends keyof Obj,\n>(\n  obj: Obj,\n  arr: Key[],\n): Prettify<Omit<Obj, Key>> => {\n  const keysToOmit = new Set(arr)\n  return Object.fromEntries(\n    Object.entries(obj).filter(([key]) => !keysToOmit.has(key as Key)),\n  ) as Prettify<Omit<Obj, Key>>\n}\n",y={},a="Pick and omit keys from an object",p={id:"snippets/Typescript/Object/pick-omit-keys",title:"Pick and omit keys from an object",description:"Pick",source:"@site/docs/snippets/Typescript/Object/pick-omit-keys.mdx",sourceDirName:"snippets/Typescript/Object",slug:"/snippets/Typescript/Object/pick-omit-keys",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/pick-omit-keys",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Object/pick-omit-keys.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Get the size (number of keys) of an object",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/object-size"},next:{title:"Shallow comparison",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/shallow-comparison"}},k={},m=[{value:"Pick",id:"pick",level:2}];function j(e){const t={h1:"h1",h2:"h2",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"pick-and-omit-keys-from-an-object",children:"Pick and omit keys from an object"}),"\n",(0,i.jsx)(t.h2,{id:"pick",children:"Pick"}),"\n",(0,i.jsx)(o.Z,{language:"ts",children:r}),"\n",(0,i.jsx)(t.h1,{id:"omit",children:"Omit"}),"\n",(0,i.jsx)(o.Z,{language:"ts",children:c})]})}function b(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(j,{...e})}):j(e)}}}]);