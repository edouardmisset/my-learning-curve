"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[4350],{4320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var r=t(5893),a=t(1151),s=t(9286);const i="/**\n * Returns the last `n` elements from the given array.\n *\n * @default n = 1\n * @template T\n * @param {T[]} array - The array to take elements from.\n * @param {number} [n=1] - The number of elements to take. Defaults to 1 if not provided.\n * @returns {T[]} The last `n` elements from the given array.\n *\n * The `Math.abs(n)` is used to ensure that `n` is always positive. If a negative number is passed, it will be converted to a positive number.\n * This means that the function will always return the last `n` elements, even if `n` is negative.\n *\n * @example\n * takeEnd([1, 2, 3, 4])\n * // Returns [4]\n *\n * takeEnd([1, 2, 3, 4], 2)\n * // Returns [3, 4]\n *\n * takeEnd([1, 2, 3, 4], -2)\n * // Returns [3, 4]\n */\nexport const takeEnd = <T>(array: T[], n = 1): T[] => array.slice(-Math.abs(n))\n\n/**\n * Returns the first `n` elements from the given array.\n *\n * @default n = 1\n * @template T\n * @param {T[]} array - The array to take elements from.\n * @param {number} [n=1] - The number of elements to take. Defaults to 1 if not provided.\n * @returns {T[]} The first `n` elements from the given array.\n *\n * The `Math.abs(n)` is used to ensure that `n` is always positive. If a negative number is passed, it will be converted to a positive number.\n * This means that the function will always return the first `n` elements, even if `n` is negative.\n *\n * @example\n * takeStart([1, 2, 3, 4])\n * // Returns [1]\n *\n * takeStart([1, 2, 3, 4], 2)\n * // Returns [1, 2]\n *\n * takeStart([1, 2, 3, 4], -2)\n * // Returns [1, 2]\n */\nexport const takeStart = <T>(array: T[], n = 1): T[] =>\n  array.slice(0, Math.abs(n))\n\n/**\n * Returns the first `n` elements if `n` is positive or the last `n` elements if `n` is negative from the given array.\n *\n * @default n = 1\n *\n * @template T\n * @param {T[]} array - The array to take elements from.\n * @param {number} [n=1] - The number of elements to take. Defaults to 1 if not provided.\n * @returns {T[]} The first `n` elements if `n` is positive or the last `n` elements if `n` is negative from the given array.\n *\n * If `n` is positive, the function will return the first `n` elements from the start of the array.\n * If `n` is negative, the function will return the last `n` elements from the end of the array.\n *\n * @example\n * take([1, 2, 3, 4])\n * // Returns [1]\n *\n * take([1, 2, 3, 4], 2)\n * // Returns [1, 2]\n *\n * take([1, 2, 3, 4], -2)\n * // Returns [3, 4]\n */\nexport const take = <T>(array: T[], n = 1): T[] =>\n  n >= 0 ? takeStart(array, n) : takeEnd(array, n)\n",o={},l="Return the first or last n elements of an array",p={id:"snippets/Typescript/Array/get-n-first-or-last",title:"Return the first or last n elements of an array",description:"The default value of n is 1.",source:"@site/docs/snippets/Typescript/Array/get-n-first-or-last.mdx",sourceDirName:"snippets/Typescript/Array",slug:"/snippets/Typescript/Array/get-n-first-or-last",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/get-n-first-or-last",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Array/get-n-first-or-last.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Find an Object in an Array by Key and Value",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/find"},next:{title:"Group an array of object by a key",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/group-by"}},u={},m=[];function f(e){const n={code:"code",h1:"h1",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"return-the-first-or-last-n-elements-of-an-array",children:["Return the first or last ",(0,r.jsx)(n.code,{children:"n"})," elements of an array"]}),"\n",(0,r.jsxs)(n.p,{children:["\u26a0\ufe0f"," The default value of ",(0,r.jsx)(n.code,{children:"n"})," is ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,r.jsx)(s.Z,{language:"ts",children:i})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}}}]);