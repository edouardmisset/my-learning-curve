"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1755],{4674:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>m,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=t(5893),a=t(1151),s=t(9286);const o='#!/bin/zsh\n\n# Define a function called \'timeit\' that takes any number of arguments.\n# Each argument is a command that will be timed.\nfunction timeit() {\n  # Loop over all arguments passed to the function.\n  for cmd in "$@"; do\n    # Initialize a variable to hold the total execution time of the command.\n    total=0\n    # Run the command 10 times.\n    for i in {1..10}; do\n      # Get the start time in nanoseconds.\n      start=$(date +%s%N)\n      # Execute the command, suppressing its output.\n      eval $cmd >/dev/null 2>&1\n      # Get the end time in nanoseconds.\n      end=$(date +%s%N)\n      # Calculate the difference between the end and start times.\n      diff=$(($end - $start))\n      # Add the difference to the total execution time.\n      total=$(($total + $diff))\n    done\n\n    # Calculate the average execution time of the command in seconds.\n    average=$(echo "scale=3; $total / 10 / 1000000000" | bc -l)\n    # Print the command and its average execution time, coloring the output.\n    printf "\\e[32m%-50s\\e[0m \\e[33m%15s\\e[0m\\n" "$cmd" "$average"\n  done\n}\n\n# Clear the terminal.\nclear\n# Print the headers for the output table, coloring the output.\nprintf "\\e[34m%-50s %15s\\e[0m\\n" "Command" "Average Time (s)"\n# Print a line to separate the headers from the data.\nprintf "%-66s\\n" "-------------------------------------------------------------------"\n\n# Call the \'timeit\' function with the commands to be timed.\ntimeit "bun install --backend=hardlink && rm -rf bun.lockb node_modules" "yarn install --no-scripts && rm -rf yarn.lock node_modules " "npm install --no-scripts --ignore-scriptd && rm -rf package-lock.json node_modules" "pnpm install --ignore-scripts && rm -rf pnpm-lock.yaml node_modules"\n',r={},m="How can I time a command's execution?",c={id:"snippets/Shell/timeit",title:"How can I time a command's execution?",description:"",source:"@site/docs/snippets/Shell/timeit.mdx",sourceDirName:"snippets/Shell",slug:"/snippets/Shell/timeit",permalink:"/my-learning-curve/docs/snippets/Shell/timeit",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Shell/timeit.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Permissions",permalink:"/my-learning-curve/docs/snippets/Shell/permissions"},next:{title:"Array Performances",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/array-performances"}},l={},d=[];function u(e){const n={h1:"h1",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"how-can-i-time-a-commands-execution",children:"How can I time a command's execution?"}),"\n",(0,i.jsx)(s.Z,{language:"sh",children:o})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);