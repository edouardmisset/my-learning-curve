"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[6371],{9641:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>u,toc:()=>p});var n=r(5893),s=r(1151),i=r(9286);const o="// string\n\nexport const createStringSorter =\n  <Obj extends Record<string, unknown>>(key?: keyof Obj, ascending = true) =>\n  (left: Obj | string, right: Obj | string): number => {\n    const leftStr = typeof left === 'string' ? left : (left[key] as string)\n    const rightStr = typeof right === 'string' ? right : (right[key] as string)\n\n    return leftStr.localeCompare(rightStr) * (ascending ? 1 : -1)\n  }\n\n// window.console.log(\n//   '\ud83d\ude80 ~ sortStrings:',\n//   ascentList.sort(sortStringsBuilder('routeName')),\n// )\n\n// Number\n\nexport const createNumberSorter =\n  <Obj extends Record<string, unknown>>(key?: keyof Obj, ascending = true) =>\n  (left: Obj | number, right: Obj | number): number => {\n    const leftNum = typeof left === 'number' ? left : (left[key] as number)\n    const rightNum = typeof right === 'number' ? right : (right[key] as number)\n\n    if (Number.isNaN(leftNum)) return 1\n    if (Number.isNaN(rightNum)) return -1\n\n    return (leftNum - rightNum) * (ascending ? 1 : -1)\n  }\n\n// window.console.log(\n//   '\ud83d\ude80 ~ sortNumber:',\n//   ascentList.sort(sortNumberBuilder('numberOfTries')),\n// )\n\n// Date\n\nexport const createDateSorter =\n  <Obj extends Record<string, unknown>>(key?: keyof Obj, ascending = true) =>\n  (left: Obj | Date, right: Obj | Date): number => {\n    const leftDate = left instanceof Date ? left : (left[key] as Date)\n    const rightDate = right instanceof Date ? right : (right[key] as Date)\n\n    if (Number.isNaN(leftDate.getTime())) return 1\n    if (Number.isNaN(rightDate.getTime())) return -1\n    return (leftDate.getTime() - rightDate.getTime()) * (ascending ? 1 : -1)\n  }\n\n// window.console.log('\ud83d\ude80 ~ sortDate:', ascentList.sort(sortDateBuilder('date')))\n",a={},c="Sort HOF",u={id:"snippets/Typescript/Array/sort",title:"Sort HOF",description:"",source:"@site/docs/snippets/Typescript/Array/sort.mdx",sourceDirName:"snippets/Typescript/Array",slug:"/snippets/Typescript/Array/sort",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/sort",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Array/sort.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Sort an array by one of its properties",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/sort-by"},next:{title:"Convert String Date",permalink:"/my-learning-curve/docs/snippets/Typescript/Date/convert-string-date"}},g={},p=[];function l(e){const t={h1:"h1",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"sort-hof",children:"Sort HOF"}),"\n",(0,n.jsx)(i.Z,{language:"ts",children:o})]})}function m(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);