"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9525],{5255:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>o,frontMatter:()=>l,metadata:()=>m,toc:()=>b});var a=i(4848),r=i(8453),t=i(1432);const s="/**\n * Checks if a value is a valid number.\n * A valid number is a number that is not `NaN` or `Infinity`.\n * @param num - The value to check.\n * @returns A boolean indicating if the value is a valid number.\n * @example\n * isValidNumber(1) // true\n * isValidNumber('1') // false\n * isValidNumber(Infinity) // false\n * isValidNumber(NaN) // false\n */\nexport const isValidNumber = (num: unknown): num is number =>\n  typeof num === 'number' && Number.isFinite(num)\n\n/**\n * Converts a value to a valid number or returns a fallback value.\n * @param maybeNumber - The value to convert.\n * @param fallbackValue - The fallback value to return if the conversion fails.\n * @returns The converted value if it is a valid number, otherwise the fallback value.\n * @example\n * validNumberWithFallback(1, 5) // 1\n * validNumberWithFallback('1', 5) // 1\n * validNumberWithFallback(Infinity, 5) // 5\n * validNumberWithFallback(NaN, 5) // 5\n * validNumberWithFallback('foo', 5) // 5\n */\nexport const validNumberWithFallback = <T = number>(\n  maybeNumber: unknown,\n  fallbackValue: T,\n): T | number => {\n  if (isValidNumber(maybeNumber)) return maybeNumber\n\n  if (typeof maybeNumber === 'string' && isValidNumber(Number(maybeNumber)))\n    return Number(maybeNumber)\n\n  return fallbackValue\n}\n",l={},u="Check if a number is valid",m={id:"snippets/Typescript/Number/is-valid",title:"Check if a number is valid",description:"A valid number is a finite number: NaN, Infinity, -Infinity are not valid.",source:"@site/docs/snippets/Typescript/Number/is-valid.mdx",sourceDirName:"snippets/Typescript/Number",slug:"/snippets/Typescript/Number/is-valid",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/is-valid",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Number/is-valid.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Calculate the quotient and remainder of a division",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/divmod"},next:{title:"Multiply an array of numbers",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/product"}},c={},b=[];function d(e){const n={code:"code",h1:"h1",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"check-if-a-number-is-valid",children:"Check if a number is valid"}),"\n",(0,a.jsxs)(n.p,{children:["A valid number is a finite number: ",(0,a.jsx)(n.code,{children:"NaN"}),", ",(0,a.jsx)(n.code,{children:"Infinity"}),", ",(0,a.jsx)(n.code,{children:"-Infinity"})," are not valid."]}),"\n",(0,a.jsx)(t.A,{language:"ts",children:s})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);