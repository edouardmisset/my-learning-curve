"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[4196],{6629:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>y});var t=r(5893),a=r(1151),c=r(9286);const s="/**\n * Counts the number of elements in an array that satisfy a condition.\n *\n * @param {T[]} arr - The array to process.\n * @param {(arg: T) => boolean} checkFunction - The function to test each element of the array.\n * This function should accept a single argument of type T (the type of elements in the array)\n * and return a boolean.\n *\n * @returns {number} The number of elements that satisfy the condition.\n *\n * @template T The type of elements in the array.\n *\n * @example\n * const arr = [1, 2, 3, 4, 5];\n * const isEven = (num) => num % 2 === 0;\n * const count = countBy(arr, isEven); // 2\n */\nexport const countBy = <T>(arr: T[], checkFunction: (arg: T) => boolean) =>\n  arr.reduce((count, value) => (checkFunction(value) ? count + 1 : count), 0)\n\n/**\n * Calculates the frequency of each unique element in an array.\n * @template T - The type of elements in the array, which extends string or number.\n * @param {T[]} arr - An array of elements of type T.\n * @returns {Record<T, number>} - An object where the keys are the unique elements from the input array and the values are their corresponding frequencies.\n *\n * @example\n * frequency(['apple', 'banana', 'apple', 'cherry'])\n * // returns { 'apple': 2, 'banana': 1, 'cherry': 1 }\n *\n * @example\n * frequency([1, 2, 1, 3])\n * // returns { '1': 2, '2': 1, '3': 1 }\n */\nexport const frequency = <const T extends string | number>(arr: T[]) =>\n  arr.reduce(\n    (acc, val) => {\n      acc[val] = (acc[val] ?? 0) + 1\n      return acc\n    },\n    {} as Record<T, number>,\n  )\n",o={},i="CountBy",u={id:"snippets/Typescript/Array/count-by",title:"CountBy",description:"",source:"@site/docs/snippets/Typescript/Array/count-by.mdx",sourceDirName:"snippets/Typescript/Array",slug:"/snippets/Typescript/Array/count-by",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/count-by",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Array/count-by.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Normalize an array of object (or collection) by a given key",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/collection-key-by"},next:{title:"Create Array",permalink:"/my-learning-curve/docs/snippets/Typescript/Array/create"}},p={},y=[];function l(e){const n={h1:"h1",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"countby",children:"CountBy"}),"\n",(0,t.jsx)(c.Z,{language:"ts",children:s})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);