"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9131],{5169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var s=n(5893),r=n(1151),a=n(9286);const i="type UnknownObject = Record<string, unknown>\n\n/**\n * Deeply compares two values to determine if they are structurally equivalent.\n *\n * This function uses several strategies to compare values:\n * - If the values are strictly equal (`===`), it returns `true`.\n * - If both values are instances of `Date`, it compares their time values.\n * - If either value is falsy (i.e., `null`, `undefined`, `0`, `NaN`, `\"\"`, or `false`), or if both values are not of the type 'object', it returns the result of the strict equality comparison between the values.\n * - If both values are objects and they do not share the same prototype, it returns `false`.\n * - If both values are objects with the same prototype, it checks if they have the same number of keys. If they don't, it returns `false`. If they do, it recursively calls `equals` on each pair of corresponding values. If all pairs of values are deeply equal, it returns `true`. If any pair of values is not deeply equal, it returns `false`.\n *\n * @template T - The type of the values to compare.\n * @param {T} left - The first value to compare.\n * @param {T} right - The second value to compare.\n * @returns {boolean} - Returns `true` if the values are equivalent, else `false`.\n *\n * @example\n * equals({ a: 1, b: 2 }, { a: 1, b: 2 }) // returns true\n * equals({ a: 1, b: 2 }, { a: 1, b: 3 }) // returns false\n * equals('a', 'a') // returns true\n * equals('a', 'b') // returns false\n * equals(new Date('2021-01-01'), new Date('2021-01-01')) // returns true\n * equals(new Date('2021-01-01'), new Date('2022-01-01')) // returns false\n */\nconst equals = <T>(left: T, right: T): boolean => {\n  if (left === right) return true\n\n  if (left instanceof Date && right instanceof Date)\n    return left.getTime() === right.getTime()\n\n  if (\n    !left ||\n    !right ||\n    (typeof left !== 'object' && typeof right !== 'object')\n  )\n    return left === right\n\n  if (\n    typeof left === 'object' &&\n    typeof right === 'object' &&\n    left !== null &&\n    right !== null &&\n    Object.getPrototypeOf(left) !== Object.getPrototypeOf(right)\n  )\n    return false\n\n  const leftObject = left as UnknownObject\n  const rightObject = right as UnknownObject\n\n  const leftKeys = Object.keys(leftObject)\n  if (leftKeys.length !== Object.keys(rightObject).length) return false\n\n  return leftKeys.every(key => equals(leftObject[key], rightObject[key]))\n}\n",l={},o="Equals",u={id:"snippets/Typescript/Function/equals",title:"Equals",description:"Check if two unknown values are deeply equal.",source:"@site/docs/snippets/Typescript/Function/equals.mdx",sourceDirName:"snippets/Typescript/Function",slug:"/snippets/Typescript/Function/equals",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/equals",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Function/equals.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Convert String Date",permalink:"/my-learning-curve/docs/snippets/Typescript/Date/convert-string-date"},next:{title:"Get the value of an environment variable",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/get-env"}},c={},p=[];function f(e){const t={a:"a",h1:"h1",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"equals",children:"Equals"}),"\n",(0,s.jsx)(t.p,{children:"Check if two unknown values are deeply equal."}),"\n",(0,s.jsx)(a.Z,{language:"ts",children:i}),"\n",(0,s.jsxs)(t.p,{children:["Credits: ",(0,s.jsx)(t.a,{href:"https://www.30secondsofcode.org/js/s/deep-equality-comparison/",children:"Angelos\nChalaris"})]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}}}]);