"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[9126],{8933:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>o});var a=i(5893),m=i(1151),t=i(9286);const r="\ntype ValueAndRange = {\n  value: number\n  minimum: number\n  maximum: number\n}\n\n/**\n * Clamps the provided value within the specified range (inclusive).\n * @param {ValueAndRange} options - An object containing the maximum, minimum, and value to be clamped.\n * @param {number} options.maximum - The maximum value of the range.\n * @param {number} options.minimum - The minimum value of the range.\n * @param {number} options.value - The value to be clamped within the range.\n * @returns {number} - The clamped value within the specified range.\n */\nexport const clampValueInRange = ({\n  maximum,\n  minimum,\n  value,\n}: ValueAndRange): number => Math.max(Math.min(value, maximum), minimum)\n\n/**\n * Checks if the provided value is strictly outside the specified limits.\n * @param {IsOutsideLimitsOptions} options - An object containing the maximum, minimum, and value to be checked.\n * @param {number} options.maximum - The maximum value of the limit.\n * @param {number} options.minimum - The minimum value of the limit.\n * @param {number} options.value - The value to be checked against the limits.\n * @returns {boolean} - A boolean value indicating whether the provided value is outside the specified limits.\n */\nexport const isOutsideRange = ({\n  maximum,\n  minimum,\n  value,\n}: ValueAndRange): boolean => value < minimum || maximum < value\n",s={},u="Clamp a value inside a range",p={id:"snippets/Typescript/Number/range",title:"Clamp a value inside a range",description:"",source:"@site/docs/snippets/Typescript/Number/range.mdx",sourceDirName:"snippets/Typescript/Number",slug:"/snippets/Typescript/Number/range",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/range",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Number/range.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Get a random number from an interval",permalink:"/my-learning-curve/docs/snippets/Typescript/Number/random"},next:{title:"Check if a value is an general object",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/is-object"}},l={},o=[];function c(e){const n={h1:"h1",...(0,m.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"clamp-a-value-inside-a-range",children:"Clamp a value inside a range"}),"\n",(0,a.jsx)(t.Z,{language:"ts",children:r})]})}function d(e={}){const{wrapper:n}={...(0,m.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);