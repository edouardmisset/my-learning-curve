"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1716],{9406:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var o=t(5893),s=t(1151);const r={},i="Folder structure",c={id:"documentation/folder-structure",title:"Folder structure",description:"\u26a0\ufe0f: default exports are used for lazy loading components (mainly pages and very large components). This is to increase first load speed. In this case, we do not use index.ts files.",source:"@site/docs/documentation/02-folder-structure.md",sourceDirName:"documentation",slug:"/documentation/folder-structure",permalink:"/my-learning-curve/docs/documentation/folder-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/documentation/02-folder-structure.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Naming Conventions",permalink:"/my-learning-curve/docs/documentation/naming-conventions"},next:{title:"Component Structure",permalink:"/my-learning-curve/docs/documentation/component-structure"}},a={},d=[];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"folder-structure",children:"Folder structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"component-name\n\u251c\u2500\u2500 helpers.ts               // Contains the handler functions and all the other function specifically needed in the component\n\u251c\u2500\u2500 index.ts                 // Only exports the component (`export * from './component-name'`)\n\u251c\u2500\u2500 component-name.tsx       // Contains the actual component\n\u251c\u2500\u2500 styles.ts                // Contains the component's style\n\u251c\u2500\u2500 constants.ts             // Contains the specific constants used in the component\n\u251c\u2500\u2500 types.ts                 // Contains the types (props ans others) used in the component and helper functions, hooks, etc.\n\u251c\u2500\u2500 hooks.ts                 // Contains the hooks used in the component\n\u2514\u2500\u2500 component-name.tests.ts  // Contains the (unit / snapshot) tests for the component\n"})}),"\n",(0,o.jsxs)(n.p,{children:["\u26a0\ufe0f: ",(0,o.jsx)(n.code,{children:"default export"}),"s are used for lazy loading components (mainly pages and very large components). This is to increase first load speed. In this case, we do not use ",(0,o.jsx)(n.code,{children:"index.ts"})," files."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Like in the example above, in a perfect world, we would be using a kebab-case naming convention for all folders and files, because PascalCase named folders/files are handled differently in the diversity of operating systems which may lead to bugs when working with teams using different OSs.\n~ ",(0,o.jsx)(n.a,{href:"https://www.robinwieruch.de/react-folder-structure/",children:"Robin Wieruch"})]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var o=t(7294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);