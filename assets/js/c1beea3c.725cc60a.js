"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[3180],{5660:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var o=s(5893),i=s(1151);const t={},r="Naming Conventions",a={id:"documentation/naming-conventions",title:"Naming Conventions",description:"Naming conventions provide, while more rigid, the following advantages:",source:"@site/docs/documentation/01-naming-conventions.md",sourceDirName:"documentation",slug:"/documentation/naming-conventions",permalink:"/my-learning-curve/docs/documentation/naming-conventions",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/documentation/01-naming-conventions.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Development Checklist",permalink:"/my-learning-curve/docs/documentation/development-checklist"},next:{title:"Folder structure",permalink:"/my-learning-curve/docs/documentation/folder-structure"}},c={},l=[{value:"Context",id:"context",level:2},{value:"Constants values",id:"constants-values",level:2},{value:"Boolean values",id:"boolean-values",level:2},{value:"Styled Components",id:"styled-components",level:2},{value:"Function Declaration vs Arrow Function",id:"function-declaration-vs-arrow-function",level:2},{value:"Handler functions",id:"handler-functions",level:2},{value:"Props vs Params",id:"props-vs-params",level:2},{value:"Custom React Hooks",id:"custom-react-hooks",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,o.jsx)(n.p,{children:"Naming conventions provide, while more rigid, the following advantages:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Code Readability:"})," Consistent naming conventions enhance code readability, making it easier for developers to understand the purpose and usage of variables, functions, and components within the codebase."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Maintainability:"})," Following naming conventions provides a standardized structure, facilitating code maintenance. Developers can quickly locate and update specific elements, reducing the likelihood of introducing errors during modifications."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Collaboration:"})," When multiple developers work on a project, adhering to naming conventions promotes a shared understanding of the code. Consistency in naming fosters collaboration and helps team members navigate and contribute to the codebase seamlessly."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,o.jsxs)(n.p,{children:["In the javascript world, the convention is to use ",(0,o.jsx)(n.code,{children:"camelCase"})," (",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Camel_case",children:"wiki"}),")."]}),"\n",(0,o.jsxs)(n.p,{children:["In the React world, Components are written using ",(0,o.jsx)(n.code,{children:"PascalCase"})," (",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Pascal_case",children:"wiki"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"constants-values",children:"Constants values"}),"\n",(0,o.jsxs)(n.p,{children:["The naming convention for constants (like environment variables) is to write\nthem using ",(0,o.jsx)(n.code,{children:"UPPER_SNAKE_CASE"})," (capital letter words separated by underscored)."]}),"\n",(0,o.jsxs)(n.p,{children:["For example: ",(0,o.jsx)(n.code,{children:"API_TIMEOUT"})]}),"\n",(0,o.jsx)(n.h2,{id:"boolean-values",children:"Boolean values"}),"\n",(0,o.jsxs)(n.p,{children:["Boolean try to read as a question using ",(0,o.jsx)(n.code,{children:"is"})," (most of the time) or ",(0,o.jsx)(n.code,{children:"has"})," (less frequent)."]}),"\n",(0,o.jsxs)(n.p,{children:["For example: ",(0,o.jsx)(n.code,{children:"isOpen"})]}),"\n",(0,o.jsx)(n.h2,{id:"styled-components",children:"Styled Components"}),"\n",(0,o.jsxs)(n.p,{children:["In this project, we use the following for naming our ",(0,o.jsx)(n.a,{href:"https://styled-components.com/docs/basics#getting-started",children:(0,o.jsx)(n.code,{children:"styled components"})}),":\n",(0,o.jsx)(n.code,{children:"Styled<ComponentName>"})]}),"\n",(0,o.jsxs)(n.p,{children:["For example: ",(0,o.jsx)(n.code,{children:"StyledCenterCell"})]}),"\n",(0,o.jsx)(n.h2,{id:"function-declaration-vs-arrow-function",children:"Function Declaration vs Arrow Function"}),"\n",(0,o.jsx)(n.p,{children:"In Javascript (TypeScript), there are multiple ways, to declare functions.\nHere are two:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Function declaration\nfunction add(a, b) {\n  return a + b\n}\n\n// Arrow Function\nconst add = (a, b) => a + b\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Arrow functions, introduced in ES6, have become widely popular due to their\n",(0,o.jsx)(n.strong,{children:"concise syntax"})," and lexical scoping of the ",(0,o.jsx)(n.code,{children:"this"})," keyword."]}),"\n",(0,o.jsxs)(n.p,{children:["In this project, we mostly use ",(0,o.jsx)(n.strong,{children:"arrow functions"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"exception to this is for React Components"})," which are Function Declaration\nas seen ",(0,o.jsx)(n.a,{href:"#props-vs-params",children:"above"})]}),"\n",(0,o.jsx)(n.h2,{id:"handler-functions",children:"Handler functions"}),"\n",(0,o.jsxs)(n.p,{children:["In this project, we use the following for naming our event handlers functions:\n",(0,o.jsx)(n.code,{children:"handle<EventName>"})," ",(0,o.jsx)(n.strong,{children:"OR"})," ",(0,o.jsx)(n.code,{children:"on<EventName>"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For example: ",(0,o.jsx)(n.code,{children:"handleClick"})]}),"\n",(0,o.jsx)(n.h2,{id:"props-vs-params",children:"Props vs Params"}),"\n",(0,o.jsxs)(n.p,{children:["When defining a function, we use ",(0,o.jsx)(n.code,{children:"params"})," for its parameters."]}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const clampValueInRange = (params: ValueAndRange): number => {\n  const { maximum, minimum, value } = params\n  return Math.max(Math.min(value, maximum), minimum)\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When defining a React Component, we use ",(0,o.jsx)(n.code,{children:"props"}),' for its "',(0,o.jsx)(n.em,{children:"properties"}),'".']}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export function BooleanStateGridCell(\n  props: BooleanStateCellProps,\n): React.JSX.Element {\n  const { checked } = props\n  return (\n    <StyledCenterCell>\n      <StyledBooleanStateCell checked={checked} />\n    </StyledCenterCell>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"custom-react-hooks",children:"Custom React Hooks"}),"\n",(0,o.jsxs)(n.p,{children:["The naming convention for React's ",(0,o.jsx)(n.code,{children:"hooks"})," is to start the name with ",(0,o.jsx)(n.a,{href:"https://react.dev/learn/reusing-logic-with-custom-hooks#hook-names-always-start-with-use",children:(0,o.jsx)(n.code,{children:"use"})}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For example: ",(0,o.jsx)(n.code,{children:"useFetch"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);