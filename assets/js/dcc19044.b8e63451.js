"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[1035],{457:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>v,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(4848),i=t(8453),o=t(1432);const s="const ENVIRONNEMENT_PREFIX = {\n  node: '',\n  CRA: 'REACT_APP_',\n  vite: 'VITE_',\n  deno: '',\n} as const\n\ntype EnvType = keyof typeof ENVIRONNEMENT_PREFIX\n\n/**\n * Retrieves the value of an environment variable.\n *\n * @param {string} variable - The name of the environment variable to retrieve.\n * @param {('node'|'CRA'|'vite')} [env='node'] - The environment from which to retrieve the variable.\n * 'node' and 'CRA' will use process.env, 'vite' will use import.meta.env.\n *\n * @throws {TypeError} Will throw an error if the environment variable is not set.\n *\n * @returns {string} The value of the environment variable.\n */\nexport async function getEnv(\n  variable: string,\n  env: EnvType = 'node',\n): Promise<string> {\n  const prefix = ENVIRONNEMENT_PREFIX[env]\n  let value: string\n  if (env === 'node' || env === 'CRA') {\n    value = process.env[variable] || process.env[`${prefix}${variable}`]\n  }\n  if (env === 'vite') {\n    // @ts-expect-error\n    value = import.meta.env[variable] || import.meta.env[`${prefix}${variable}`]\n  }\n\n  if (env === 'deno') {\n    try {\n      const { load } = await import(\n        // @ts-ignore\n        'https://deno.land/std@0.213.0/dotenv/mod.ts'\n      )\n      const env = await load()\n      value = env[variable]\n    } catch (error) {\n      console.error(\"Error loading Deno's `dotenv` library:\", error)\n    }\n  }\n\n  if (value === undefined) {\n    throw new TypeError(`It seems like the variable \"${variable}\" is not set in the environment (\\`.env\\` file).\n    @Dev: Did you forget to execute \"cp .env.dev .env\" and adjust variables in the .env file to match your own environment ?`)\n  }\n  return value\n}\n",a={},v="Get the value of an environment variable",l={id:"snippets/Typescript/Function/get-env",title:"Get the value of an environment variable",description:"THis works for the following environments: CRA, node, VITE, deno.",source:"@site/docs/snippets/Typescript/Function/get-env.mdx",sourceDirName:"snippets/Typescript/Function",slug:"/snippets/Typescript/Function/get-env",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/get-env",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Function/get-env.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Equals",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/equals"},next:{title:"Is the collection empty?",permalink:"/my-learning-curve/docs/snippets/Typescript/Function/is-empty"}},c={},p=[];function d(e){const n={code:"code",h1:"h1",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"get-the-value-of-an-environment-variable",children:"Get the value of an environment variable"}),"\n",(0,r.jsxs)(n.p,{children:["THis works for the following environments: ",(0,r.jsx)(n.code,{children:"CRA"}),", ",(0,r.jsx)(n.code,{children:"node"}),", ",(0,r.jsx)(n.code,{children:"VITE"}),", ",(0,r.jsx)(n.code,{children:"deno"}),"."]}),"\n",(0,r.jsx)(o.A,{language:"ts",children:s})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);