"use strict";(self.webpackChunkmy_learning_curve=self.webpackChunkmy_learning_curve||[]).push([[6227],{7108:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var s=n(5893),i=n(1151),r=n(9286);const c="/**\n * Returns the size of an object, which is the number of its own enumerable properties.\n *\n * @param {Record<string, unknown>} obj - The object to query.\n * @returns {number} Returns the size of the `obj`.\n *\n * @example\n * objectSize({a: 1, b: 2, c: 3});\n * // => 3\n */\nexport const objectSize = (obj: Record<string, unknown>): number =>\n  Object.keys(obj).length\n\n/**\n * @description Alias for the {@link objectSize} function.\n */\nexport const objectLength = objectSize\n",o={},p="Get the size (number of keys) of an object",a={id:"snippets/Typescript/Object/object-size",title:"Get the size (number of keys) of an object",description:"",source:"@site/docs/snippets/Typescript/Object/object-size.mdx",sourceDirName:"snippets/Typescript/Object",slug:"/snippets/Typescript/Object/object-size",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/object-size",draft:!1,unlisted:!1,editUrl:"https://github.com/edouardmisset/my-learning-curve/tree/main/docs/snippets/Typescript/Object/object-size.mdx",tags:[],version:"current",frontMatter:{},sidebar:"snippetsSidebar",previous:{title:"Type safe way to get an object's keys",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/object-keys"},next:{title:"Pick and omit keys from an object",permalink:"/my-learning-curve/docs/snippets/Typescript/Object/pick-omit-keys"}},b={},u=[];function j(e){const t={h1:"h1",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"get-the-size-number-of-keys-of-an-object",children:"Get the size (number of keys) of an object"}),"\n",(0,s.jsx)(r.Z,{language:"ts",children:c})]})}function m(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}}}]);